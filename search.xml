<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[itchat+tornado微信报警]]></title>
      <url>/2018/03/13/itchat-tornado%E5%BE%AE%E4%BF%A1%E6%8A%A5%E8%AD%A6/</url>
      <content type="html"><![CDATA[<p>公司现在用着zabbix+tornado+微信企业号实现实时报警功能，但是我嫌麻烦，不想多安装个微信企业号。于是就想通过itchat来转发报警信息。<br>大概结构如下图：</p>
<p><img src="/images/itchat+tornado微信报警.png" alt="image"></p>
<h4 id="版本工具"><a href="#版本工具" class="headerlink" title="版本工具"></a>版本工具</h4><ul>
<li style="list-style: none"><input type="checkbox" checked> tornado</li>
<li style="list-style: none"><input type="checkbox" checked> itchat</li>
<li style="list-style: none"><input type="checkbox" checked> python2.7</li>
</ul>
<h4 id="itchat"><a href="#itchat" class="headerlink" title="itchat"></a>itchat</h4><p>看看<a href="https://itchat.readthedocs.io/zh/latest/" target="_blank" rel="noopener">官网介绍</a>,完成发送告警信息功能的话，需要：</p>
<blockquote>
<p>查找到指定的微信用户</p>
<p>查找到指定的微信群组</p>
<p>send 信息</p>
</blockquote>
<p>所以，微信脚本可以这样写：</p>
<h5 id="查找微信用户"><a href="#查找微信用户" class="headerlink" title="查找微信用户"></a>查找微信用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_UserName(NickName):</span><br><span class="line">    info = itchat.search_friends(nickName=NickName)</span><br><span class="line">    fname = info[0][&apos;UserName&apos;]</span><br><span class="line">    return fname</span><br></pre></td></tr></table></figure>
<p>只需要传<code>微信昵称</code>即可以查找到指定用户。</p>
<h5 id="查找微信群组"><a href="#查找微信群组" class="headerlink" title="查找微信群组"></a>查找微信群组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_Group(groupname):</span><br><span class="line">    group = itchat.search_chatrooms(name=groupname)</span><br><span class="line">    if group is not None:</span><br><span class="line">        group_name = group[0][&apos;UserName&apos;]</span><br><span class="line">        return group_name</span><br></pre></td></tr></table></figure>
<p>同样只需要传入微信群组的群名即可。</p>
<h5 id="发送信息"><a href="#发送信息" class="headerlink" title="发送信息"></a>发送信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def send_msg(fname,msg):</span><br><span class="line">    b = itchat.send(msg, toUserName=fname)</span><br><span class="line">    req = b.get(&apos;BaseResponse&apos;).get(&apos;Ret&apos;)</span><br><span class="line">    if req == 0 :</span><br><span class="line">        print u&apos;消息发送成功&apos;</span><br></pre></td></tr></table></figure>
<p>传入两个参数，一个是发送对象<code>fname</code>，可以是用户也可以是群组。另一个参数是<code>msg</code>需要发送的报警信息。</p>
<p>完整代码点<a href="https://github.com/legolas-zeng/scripts/blob/master/tornado/two.py" target="_blank" rel="noopener">这里</a>,顺手点个star吧≖‿≖✧</p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> tornado </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单机版的tornado+nginx反向代理]]></title>
      <url>/2018/03/08/%E5%8D%95%E6%9C%BA%E7%89%88%E7%9A%84tornado-nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>国际惯例，先上一个tornado最简单的<code>hello，world</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># -*-coding:utf-8 -*-</span><br><span class="line">import tornado</span><br><span class="line">from tornado import ioloop # 核心的I/O循环</span><br><span class="line">from tornado import web # web框架的大部分主要功能，包含RequestHandler和Application两个重要的类</span><br><span class="line">from tornado.options import define, options</span><br><span class="line">define(&quot;port&quot;, default=8000, type=int)</span><br><span class="line"></span><br><span class="line">class IndexHandler(web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&apos;hello ,world&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(handlers=[(r&quot;/&quot;, IndexHandler)])</span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure>
<p>浏览器输入<code>ip：8000</code>就可以看到，说明tornado运行正常。</p>
<p><img src="/images/单机版的tornado-nginx反向代理1.png" alt="image"></p>
<p>如果我想有<code>http://zengabcdo.com/</code>访问<code>tornado</code>,就要用到反向代理。<br>现在<code>hosts</code>文件添加解析记录（win端修改<code>C:\Windows\System32\drivers\etc</code>的hosts），添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.28.130 zengabcdo.com</span><br></pre></td></tr></table></figure></p>
<p>在nginx.conf上添加server模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80; # nginx监听端口</span><br><span class="line">        server_name  zengabcdo.com; # 虚拟主机名</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://192.168.28.130:8000; # 代理转发的地址</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>然后重新载入配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></p>
<p>浏览器输入：<a href="http://zengabcdo.com/" target="_blank" rel="noopener">http://zengabcdo.com/</a></p>
<p><img src="/images/单机版的tornado-nginx反向代理2.png" alt="image"></p>
<p>熟悉的hello，world……</p>
]]></content>
      
        <categories>
            
            <category> web后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ansible </tag>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker防坑指南（一）]]></title>
      <url>/2018/03/08/docker%E9%98%B2%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>刚开始用docker的时候就发现centos7容器没办法使用<code>systemctl</code>,<code>service</code>命令提示错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@slave2 ~]# systemctl stop firewalld.service</span><br><span class="line">Failed to get D-Bus connection: Operation not permitted</span><br></pre></td></tr></table></figure></p>
<p>对于这个bug，网上很多人说<code>centos7.2</code>之后会得到处理，实际上我现在使用的<code>centos7.3</code>,问题依旧存在，放几个啪啪打脸的有毒连接：</p>
<p>1、<a href="https://seven.centos.org/2015/12/fixing-centos-7-systemd-conflicts-with-docker/" target="_blank" rel="noopener">Fixing CentOS 7 systemd conflicts with docker</a></p>
<p>2、<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1033604" target="_blank" rel="noopener">Unable to start systemd service in Docker container</a></p>
<hr>
<p>这个BUG报错信息大概意思是<code>未能获得D-Bus连接，不能进行操作</code>，centos7作为全新的系统，摒弃centos6，直接采用<code>systemd</code>作为系统启动和服务器守护进程管理器，新特性之一就是采用socket式与D-Bus总线式激活服务,用非常行外的话说，就是centos7启动服务，需要与内核通讯，且需要D-Bus连接的权限。</p>
<hr>
<p>我写这文档的时候只知道两种解决方法：</p>
<h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>需要用到<code>docker</code>的特权模式，centos容器作为一个文件系统，只有获取<code>--privileged</code>才能访问linux内核。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ docker run -itd --privileged ansible/centos7-ansible init</span><br><span class="line">a73599408f1a7ba6ff7cd2a73a4f613f7fd3393c021cbdc82c07c9b21134cbb5</span><br><span class="line">~ ᐅ docker exec -it a73599408f1a /bin/bash</span><br><span class="line">[root@a73599408f1a ansible]# systemctl stop firewalld.service</span><br><span class="line">Failed to stop firewalld.service: Unit firewalld.service not loaded.</span><br></pre></td></tr></table></figure>
<p>ok，这样就没报错了。</p>
<p>当然也可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ docker run -d --privileged=true ansible/centos7-ansible /usr/sbin/init </span><br><span class="line">975b6451e07d3edfccc0201e5b35f350cd0bc5321dfaf1e15432bc48bd8b591d</span><br><span class="line">~ ᐅ docker exec -it 975b6451e07d /bin/bash</span><br><span class="line">[root@975b6451e07d ansible]# systemctl stop firewalld.service</span><br><span class="line">Failed to stop firewalld.service: Unit firewalld.service not loaded.</span><br></pre></td></tr></table></figure></p>
<p>我一直用的docker-compose，所以，docker-compose.yml文件可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version : &apos;2&apos;</span><br><span class="line">services :</span><br><span class="line">  centos7 :</span><br><span class="line">    image: 你的镜像</span><br><span class="line">    container_name : xxxx</span><br><span class="line">    privileged : true</span><br><span class="line">    command : init</span><br><span class="line">    .....balabala.....</span><br></pre></td></tr></table></figure></p>
<p>主要就是加了<code>privileged</code>特权和执行<code>command</code>。</p>
<p>当然喜欢用<code>dockerfile</code>的可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">ENV container docker</span><br><span class="line">RUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == \</span><br><span class="line">systemd-tmpfiles-setup.service ] || rm -f $i; done); \</span><br><span class="line">rm -f /lib/systemd/system/multi-user.target.wants/*;\</span><br><span class="line">rm -f /etc/systemd/system/*.wants/*;\</span><br><span class="line">rm -f /lib/systemd/system/local-fs.target.wants/*; \</span><br><span class="line">rm -f /lib/systemd/system/sockets.target.wants/*udev*; \</span><br><span class="line">rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \</span><br><span class="line">rm -f /lib/systemd/system/basic.target.wants/*;\</span><br><span class="line">rm -f /lib/systemd/system/anaconda.target.wants/*;</span><br><span class="line">VOLUME [ &quot;/sys/fs/cgroup&quot; ]</span><br><span class="line">CMD [&quot;/usr/sbin/init&quot;]</span><br></pre></td></tr></table></figure></p>
<p>这是github上的一个<a href="https://github.com/docker-library/docs/blob/master/centos/README.md" target="_blank" rel="noopener">官方例子</a>。</p>
<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>有时间再写….</p>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/" target="_blank" rel="noopener">https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/</a></p>
<p><code>深入浅析centos7中的systemd</code>:  <a href="https://www.zhangshengrong.com/p/JKN8EgomX6/" target="_blank" rel="noopener">https://www.zhangshengrong.com/p/JKN8EgomX6/</a></p>
<p><code>centOS7服务管理与启动流程</code>：<a href="https://www.cnblogs.com/duzhaoqi/p/7582404.html" target="_blank" rel="noopener">https://www.cnblogs.com/duzhaoqi/p/7582404.html</a></p>
<p><code>D-Bus介绍</code>: <a href="http://blog.csdn.net/qq_29729577/article/details/51143260" target="_blank" rel="noopener">http://blog.csdn.net/qq_29729577/article/details/51143260</a></p>
<p><code>CentOS image documentation</code>:<a href="https://github.com/docker-library/docs/blob/master/centos/README.md" target="_blank" rel="noopener">https://github.com/docker-library/docs/blob/master/centos/README.md</a></p>
<p><code>D-Bus</code>:一种本地进程间通信机制</p>
]]></content>
      
        <categories>
            
            <category> 容器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ansible的api大坑解析]]></title>
      <url>/2018/02/27/ansible%E7%9A%84api%E5%A4%A7%E5%9D%91%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="工具版本"><a href="#工具版本" class="headerlink" title="工具版本"></a>工具版本</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> centos7</li>
<li style="list-style: none"><input type="checkbox" checked> ansible2.4</li>
<li style="list-style: none"><input type="checkbox" checked> ansible2.3</li>
<li style="list-style: none"><input type="checkbox" checked> python2.7</li>
</ul>
<p>先上一个官方原生api，<a href="http://docs.ansible.com/ansible/latest/dev_guide/developing_api.html" target="_blank" rel="noopener">点这里</a>查看官网。</p>
<p>写这文档的时候官方api版本是<code>ansible 2.4.2.0</code>，版本改动略大，导致很多以前的代码不能用。</p>
<h3 id="一些改动过的方法"><a href="#一些改动过的方法" class="headerlink" title="一些改动过的方法"></a>一些改动过的方法</h3><h5 id="Inventory-类"><a href="#Inventory-类" class="headerlink" title="Inventory 类"></a>Inventory 类</h5><p><code>Inventory 类</code>是用于解析和聚合host,group，<code>ansible 2.3</code>之前的import方法是：</p>
<blockquote>
<p>from ansible.inventory import Inventory</p>
</blockquote>
<p><code>ansible 2.4</code>导入Inventory：</p>
<blockquote>
<p>from ansible.inventory.manager import InventoryManager</p>
</blockquote>
<p>且用法也不同，查看源码，愣是没发现为什么不同，此坑日后再填。</p>
<h5 id="VariableManager类"><a href="#VariableManager类" class="headerlink" title="VariableManager类"></a>VariableManager类</h5><p><code>VariableManager</code>用于接收<code>Inventory</code>库存。</p>
<p><code>ansible 2.3</code>导入：</p>
<blockquote>
<p>from ansible.vars import VariableManager</p>
</blockquote>
<p><code>ansible 2.4</code>导入：</p>
<blockquote>
<p>from ansible.vars.manager import VariableManager</p>
</blockquote>
<h3 id="ansible-2-3的一个api例子"><a href="#ansible-2-3的一个api例子" class="headerlink" title="ansible 2.3的一个api例子"></a>ansible 2.3的一个api例子</h3><p>编写<code>ansible_api.py</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">def exec_ansible(module,args,host):</span><br><span class="line">    import json</span><br><span class="line">    from collections import namedtuple</span><br><span class="line">    from ansible.parsing.dataloader import DataLoader</span><br><span class="line">    from ansible.vars import VariableManager</span><br><span class="line">    from ansible.inventory import Inventory</span><br><span class="line">    from ansible.playbook.play import Play</span><br><span class="line">    from ansible.executor.task_queue_manager import TaskQueueManager</span><br><span class="line">    from ansible.plugins.callback import CallbackBase</span><br><span class="line"></span><br><span class="line">    class ResultCallback(CallbackBase):</span><br><span class="line">        def v2_runner_on_ok(self, result, **kwargs):</span><br><span class="line">            host = result._host</span><br><span class="line">            self.data = json.dumps(&#123;host.name: result._result&#125;, indent=4)</span><br><span class="line"></span><br><span class="line">    Options = namedtuple(&apos;Options&apos;, [&apos;connection&apos;, &apos;module_path&apos;, &apos;forks&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;check&apos;])</span><br><span class="line">    variable_manager = VariableManager()</span><br><span class="line">    loader = DataLoader()</span><br><span class="line">    options = Options(connection=&apos;smart&apos;, module_path=&apos;/usr/lib/python2.7/site-packages/ansible/modules/&apos;, forks=100, become=None, become_method=None, become_user=&apos;root&apos;, check=False)</span><br><span class="line">    passwords = dict(vault_pass=&apos;secret&apos;)</span><br><span class="line">    results_callback = ResultCallback()</span><br><span class="line">    inventory = Inventory(loader=loader, variable_manager=variable_manager, host_list=&apos;/etc/ansible/hosts&apos;)</span><br><span class="line">    variable_manager.set_inventory(inventory)</span><br><span class="line"></span><br><span class="line">    play_source =  dict(</span><br><span class="line">            name = &quot;Ansible Play&quot;,</span><br><span class="line">            hosts = host,</span><br><span class="line">            gather_facts = &apos;no&apos;,</span><br><span class="line">            tasks = [</span><br><span class="line">                dict(action=dict(module=module, args=args), register=&apos;shell_out&apos;),</span><br><span class="line">             ]</span><br><span class="line">        )</span><br><span class="line">    play = Play().load(play_source, variable_manager=variable_manager, loader=loader)</span><br><span class="line"></span><br><span class="line">    tqm = None</span><br><span class="line">    try:</span><br><span class="line">        tqm = TaskQueueManager(</span><br><span class="line">                  inventory=inventory,</span><br><span class="line">                  variable_manager=variable_manager,</span><br><span class="line">                  loader=loader,</span><br><span class="line">                  options=options,</span><br><span class="line">                  passwords=passwords,</span><br><span class="line">                  stdout_callback=results_callback,</span><br><span class="line">              )</span><br><span class="line">        result = tqm.run(play)</span><br><span class="line">    finally:</span><br><span class="line">        if tqm is not None:</span><br><span class="line">            tqm.cleanup</span><br><span class="line">        return json.loads(results_callback.data)</span><br></pre></td></tr></table></figure></p>
<p>在同目录下引用此<code>api</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info = exec_ansible(module=&apos;setup&apos;,args=&apos;&apos;,host=&apos;172.17.0.3&apos;)</span><br></pre></td></tr></table></figure></p>
<p>可以获取<code>172.17.0.3</code>机器的详细信息，经常用于运维管理系统开发。配合django，把info装好：</p>
<p>编辑<code>test.py</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from ansible_api import exec_ansible</span><br><span class="line">import json,requests</span><br><span class="line"></span><br><span class="line">def get_info():</span><br><span class="line">	info = exec_ansible(module=&apos;setup&apos;,args=&apos;&apos;,host=&apos;172.17.0.3&apos;)</span><br><span class="line">	print type(info)</span><br><span class="line">	data = json.dumps(info)</span><br><span class="line">	url = &quot;http://192.168.2.120/api_host_info&quot;</span><br><span class="line">	r = requests.post(url, data=data)</span><br><span class="line">	print r.status_code</span><br><span class="line">	</span><br><span class="line">get_info()</span><br></pre></td></tr></table></figure></p>
<p>django后台功能：<br>其中<code>data</code>数据是通过view.py获取到<code>test.py</code>传送过来的数据，调用<code>ansible_handle</code>处理，剩余的就很简单了。略…..<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#TODO ansible数据处理</span><br><span class="line">def ansible_handle(data):</span><br><span class="line">	req = data</span><br><span class="line">	data_list = &#123;&#125;</span><br><span class="line">	for k, v in req.items():</span><br><span class="line">		info_list = v.get(&apos;ansible_facts&apos;)</span><br><span class="line">		network_info = info_list.get(&apos;ansible_eth0&apos;)</span><br><span class="line">		disk_info = info_list.get(&apos;ansible_mounts&apos;)</span><br><span class="line">		men_info = info_list.get(&apos;ansible_memory_mb&apos;)</span><br><span class="line">		HDD_info = info_list.get(&apos;ansible_devices&apos;)</span><br><span class="line">		</span><br><span class="line">		print disk_info</span><br><span class="line">		</span><br><span class="line">		network = network_info.get(&apos;ipv4&apos;)</span><br><span class="line">		data_list[&apos;netmask&apos;] = network.get(&apos;netmask&apos;)</span><br><span class="line">		data_list[&apos;network&apos;] = network.get(&apos;network&apos;)</span><br><span class="line">		</span><br><span class="line">		data_list[&apos;ipv4&apos;] = info_list.get(&apos;ansible_all_ipv4_addresses&apos;)     # ipv4</span><br><span class="line">		data_list[&apos;system_version&apos;] = info_list.get(&apos;ansible_distribution_version&apos;)  # 系统版本</span><br><span class="line">		data_list[&apos;hostname&apos;] = info_list.get(&apos;ansible_hostname&apos;)           # 主机名</span><br><span class="line">		data_list[&apos;system&apos;] = info_list.get(&apos;ansible_distribution&apos;)         # 系统发行版</span><br><span class="line">		data_list[&apos;men&apos;] = info_list.get(&apos;ansible_memtotal_mb&apos;)             # 物理内存容量</span><br><span class="line">		data_list[&apos;cpu&apos;] = info_list.get(&apos;ansible_processor&apos;)               # cpu</span><br><span class="line">		data_list[&apos;kernel&apos;] = info_list.get(&apos;ansible_kernel&apos;)               # 内核</span><br><span class="line">		data_list[&apos;cpu_total&apos;] = info_list.get(&apos;ansible_processor_vcpus&apos;)   # CPU核心数</span><br></pre></td></tr></table></figure></p>
<p>参考文档：</p>
<p><code>ansible2.0 playbook api运维应用</code><a href="https://segmentfault.com/a/1190000008009639" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008009639</a></p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[远程控制supervisor]]></title>
      <url>/2018/02/27/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6supervisor/</url>
      <content type="html"><![CDATA[<p><code>supervisor</code>启动后，自动开放<code>RPC</code>功能，可通过<code>XML-RPC API</code>调用管理进程。官方文档请移步<a href="http://supervisord.org/api.html" target="_blank" rel="noopener">这里</a>。</p>
<h3 id="连接supervisor"><a href="#连接supervisor" class="headerlink" title="连接supervisor"></a>连接supervisor</h3><p>使用Python的xmlrpclib客户端库进行此操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import xmlrpclib</span><br><span class="line"></span><br><span class="line">server = xmlrpclib.Server(&apos;http://用户名:密码@supervisor的ip:端口/RPC2&apos;)</span><br></pre></td></tr></table></figure></p>
<p>例如这样的：</p>
<blockquote>
<p>server = xmlrpclib.Server(‘<a href="http://user:123@192.168.28.130:9001/RPC2" target="_blank" rel="noopener">http://user:123@192.168.28.130:9001/RPC2</a>‘)</p>
</blockquote>
<h3 id="supervisor的API方法"><a href="#supervisor的API方法" class="headerlink" title="supervisor的API方法"></a>supervisor的API方法</h3><p>方法好的，可以通过<code>system.listMethods()</code>查看有哪些可以用的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">In [11]: server.system.listMethods()</span><br><span class="line">Out[11]:</span><br><span class="line">[&apos;supervisor.addProcessGroup&apos;,</span><br><span class="line"> &apos;supervisor.clearAllProcessLogs&apos;,</span><br><span class="line"> &apos;supervisor.clearLog&apos;,</span><br><span class="line"> &apos;supervisor.clearProcessLog&apos;,</span><br><span class="line"> &apos;supervisor.clearProcessLogs&apos;,</span><br><span class="line"> &apos;supervisor.getAPIVersion&apos;,</span><br><span class="line"> &apos;supervisor.getAllConfigInfo&apos;,</span><br><span class="line"> &apos;supervisor.getAllProcessInfo&apos;,</span><br><span class="line"> &apos;supervisor.getIdentification&apos;,</span><br><span class="line"> &apos;supervisor.getPID&apos;,</span><br><span class="line"> &apos;supervisor.getProcessInfo&apos;,</span><br><span class="line"> &apos;supervisor.getState&apos;,</span><br><span class="line"> &apos;supervisor.getSupervisorVersion&apos;,</span><br><span class="line"> &apos;supervisor.getVersion&apos;,</span><br><span class="line"> &apos;supervisor.readLog&apos;,</span><br><span class="line"> &apos;supervisor.readMainLog&apos;,</span><br><span class="line"> &apos;supervisor.readProcessLog&apos;,</span><br><span class="line"> &apos;supervisor.readProcessStderrLog&apos;,</span><br><span class="line"> &apos;supervisor.readProcessStdoutLog&apos;,</span><br><span class="line"> &apos;supervisor.reloadConfig&apos;,</span><br><span class="line"> &apos;supervisor.removeProcessGroup&apos;,</span><br><span class="line"> &apos;supervisor.restart&apos;,</span><br><span class="line"> &apos;supervisor.sendProcessStdin&apos;,</span><br><span class="line"> &apos;supervisor.sendRemoteCommEvent&apos;,</span><br><span class="line"> &apos;supervisor.shutdown&apos;,</span><br><span class="line"> &apos;supervisor.signalAllProcesses&apos;,</span><br><span class="line"> &apos;supervisor.signalProcess&apos;,</span><br><span class="line"> &apos;supervisor.signalProcessGroup&apos;,</span><br><span class="line"> &apos;supervisor.startAllProcesses&apos;,</span><br><span class="line"> &apos;supervisor.startProcess&apos;,</span><br><span class="line"> &apos;supervisor.startProcessGroup&apos;,</span><br><span class="line"> &apos;supervisor.stopAllProcesses&apos;,</span><br><span class="line"> &apos;supervisor.stopProcess&apos;,</span><br><span class="line"> &apos;supervisor.stopProcessGroup&apos;,</span><br><span class="line"> &apos;supervisor.tailProcessLog&apos;,</span><br><span class="line"> &apos;supervisor.tailProcessStderrLog&apos;,</span><br><span class="line"> &apos;supervisor.tailProcessStdoutLog&apos;,</span><br><span class="line"> &apos;system.listMethods&apos;,</span><br><span class="line"> &apos;system.methodHelp&apos;,</span><br><span class="line"> &apos;system.methodSignature&apos;,</span><br><span class="line"> &apos;system.multicall&apos;]</span><br></pre></td></tr></table></figure></p>
<p>这些方法都非常好理解，挑几个常用的：</p>
<h5 id="启动进程"><a href="#启动进程" class="headerlink" title="启动进程"></a>启动进程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [9]: server.supervisor.startProcess(&apos;nginx&apos;)</span><br><span class="line">Out[9]: True</span><br></pre></td></tr></table></figure>
<p>里面进程名是<code>supervisord.conf</code>的<code>program</code>名，成功返回True。</p>
<h5 id="停止进程"><a href="#停止进程" class="headerlink" title="停止进程"></a>停止进程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [10]: server.supervisor.stopProcess(&apos;nginx&apos;)</span><br><span class="line">Out[10]: True</span><br></pre></td></tr></table></figure>
<h5 id="获取进程信息"><a href="#获取进程信息" class="headerlink" title="获取进程信息"></a>获取进程信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [16]: server.supervisor.getProcessInfo(&apos;nginx&apos;)</span><br><span class="line">Out[16]:</span><br><span class="line">&#123;&apos;description&apos;: &apos;Feb 27 05:02 PM&apos;,</span><br><span class="line"> &apos;exitstatus&apos;: -1,</span><br><span class="line"> &apos;group&apos;: &apos;nginx&apos;,</span><br><span class="line"> &apos;logfile&apos;: &apos;/tmp/nginx-stdout---supervisor-6LMS7i.log&apos;,</span><br><span class="line"> &apos;name&apos;: &apos;nginx&apos;,</span><br><span class="line"> &apos;now&apos;: 1519723492,</span><br><span class="line"> &apos;pid&apos;: 0,</span><br><span class="line"> &apos;spawnerr&apos;: &apos;&apos;,</span><br><span class="line"> &apos;start&apos;: 1519722170,</span><br><span class="line"> &apos;state&apos;: 0,</span><br><span class="line"> &apos;statename&apos;: &apos;STOPPED&apos;,</span><br><span class="line"> &apos;stderr_logfile&apos;: &apos;/tmp/nginx-stderr---supervisor-FICVoc.log&apos;,</span><br><span class="line"> &apos;stdout_logfile&apos;: &apos;/tmp/nginx-stdout---supervisor-6LMS7i.log&apos;,</span><br><span class="line"> &apos;stop&apos;: 1519722172&#125;</span><br></pre></td></tr></table></figure>
<p><code>&#39;state&#39;: 0</code>说明已经停止进程了。</p>
<h3 id="整合django"><a href="#整合django" class="headerlink" title="整合django"></a>整合django</h3><p>此坑日后再填</p>
<p>参考文档：</p>
<p><code>官网文档</code>：<a href="http://supervisord.org/api.html" target="_blank" rel="noopener">http://supervisord.org/api.html</a></p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> supervisor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[supervisor进程管理]]></title>
      <url>/2018/02/10/supervisor%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>supervisor是python写的linux进程管理工具，安装使用简单</p>
<h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>本次配置使用的工具如下：</p>
<blockquote>
<p>centos7</p>
<p>python2.7(系统自带)</p>
<p>mysql5.7</p>
<p>redis4</p>
<p>supervisor</p>
</blockquote>
<p>安装过程很简单，先安装<code>python-setuptools</code>工具，再安装工具里面的<code>supervisor</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install python-setuptools</span><br><span class="line">easy_install supervisor</span><br></pre></td></tr></table></figure></p>
<p>安装完成后，新建一个<code>supervisor</code>文件夹，再生成配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/supervisor</span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure></p>
<p><code>supervisor</code>共有三个命令：</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> supervisord</li>
<li style="list-style: none"><input type="checkbox" checked> supervisorctl</li>
<li style="list-style: none"><input type="checkbox" checked> echo_supervisord_conf</li>
</ul>
<p>启动命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure></p>
<p>启动前，先配置先配置文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[inet_http_server]         </span><br><span class="line">port=0.0.0.0:9001       #设置允许任何ip登录后台   </span><br><span class="line">username=user           #设置默认账户   </span><br><span class="line">password=123</span><br></pre></td></tr></table></figure>
<p>这里<code>port</code>默认是<code>127.0.0.1:9001</code>，把它改为<code>0.0.0.0:9001</code>。然后设置监控<code>redis</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[program:redis]</span><br><span class="line">autorestart=true</span><br><span class="line">autostart=true</span><br><span class="line">directory=/etc/redis</span><br><span class="line">command=/usr/bin/redis-server /etc/redis/6379_master.conf</span><br></pre></td></tr></table></figure>
<p>非常的简单明了，我就不多解释了，唯一要讲的是redis安装的时候，他的配置文件一定要把<code>daemonize</code>设置成<code>no</code>,这样redis就不会进入守护进程模式，通过连接就能执行关闭redis，不然…..你只能启动redis而不能关闭它，并且它的状态会变成异常的<code>fatal</code>或者<code>BACKOFF</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[program:mysql]</span><br><span class="line">autorestart=true</span><br><span class="line">autostart=true</span><br><span class="line">directory=/usr/local/mysql</span><br><span class="line">command=/usr/bin/pidproxy /data/mysqldata/localhost.pid /usr/local/mysql/bin/mysqld_safe</span><br></pre></td></tr></table></figure>
<p><code>mysql</code>的配置就不一样。根据<a href="http://www.supervisord.org/subprocess.html" target="_blank" rel="noopener">官网</a>的提示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[program:mysql]</span><br><span class="line">command=/path/to/pidproxy /path/to/pidfile /path/to/mysqld_safe</span><br></pre></td></tr></table></figure></p>
<p>需要找到这<code>pidproxy</code>，<code>pidfile</code>，<code>mysqld_safe</code>,然后…然后就能召唤神龙了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#pidproxy</span><br><span class="line"></span><br><span class="line">~ ᐅ whereis pidproxy </span><br><span class="line">pidproxy: /usr/bin/pidproxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pidfile</span><br><span class="line"></span><br><span class="line">mysql root@localhost:(none)&gt; show variables like &apos;pid_file&apos;\G;</span><br><span class="line">***************************[ 1. row ]***************************</span><br><span class="line">Variable_name | pid_file</span><br><span class="line">Value         | /data/mysqldata/localhost.pid</span><br><span class="line"></span><br><span class="line"># mysqld_safe</span><br><span class="line"></span><br><span class="line">~ ᐅ find / -name mysqld_safe</span><br><span class="line">/usr/local/mysql/bin/mysqld_safe</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/supervisor.png" alt="“图片描述”"><br>大概就这些，supervisor管理进程比较方便。局限性也多，有些想法或许可以实现，比如搭进程管理集群，配合django使用等等。</p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> supervisor </tag>
            
            <tag> 运维 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django聚合查询]]></title>
      <url>/2018/01/29/Django%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>在mysql中，如果遇到这样的表格<code>games</code>：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">game</th>
<th style="text-align:left">platforms</th>
<th style="text-align:left">zone</th>
<th style="text-align:left">name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">tangm</td>
<td style="text-align:left">jxdq</td>
<td style="text-align:left">CW</td>
<td style="text-align:left">s1</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">tangm</td>
<td style="text-align:left">jxdq</td>
<td style="text-align:left">CW</td>
<td style="text-align:left">s2</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">tangm</td>
<td style="text-align:left">jxdq</td>
<td style="text-align:left">CW</td>
<td style="text-align:left">s3</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">tangm</td>
<td style="text-align:left">jxdq</td>
<td style="text-align:left">BT</td>
<td style="text-align:left">s1</td>
</tr>
</tbody>
</table>
<p>假如我想查询<code>platforms</code>为<code>jxdq</code>,zone为CW的数据，并把name聚合在一格中。可以很容易写出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select zone,count(1),concat(GROUP_CONCAT(name order by id separator &apos;\&quot;\,\&quot;&apos;)) as &apos;result&apos; from games where game=&apos;tmld&apos; GROUP BY zone;</span><br></pre></td></tr></table></figure></p>
<p>得到结果：</p>
<table>
<thead>
<tr>
<th>zone</th>
<th>count(1)</th>
<th>result</th>
</tr>
</thead>
<tbody>
<tr>
<td>CW</td>
<td>3</td>
<td>“s1”,”s2”,”s3”</td>
</tr>
</tbody>
</table>
<p>还是比较简单的，但是如果放在django里呢？？只有<code>Q查询（组合操作）</code>和<code>F查询(列操作)</code>做不到的。<br>在这里需要自定义一个<code>聚合函数</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.db.models import Aggregate, CharField</span><br></pre></td></tr></table></figure>
<p>先从<code>db</code>模块中导入<code>Aggregate</code>和<code>CharField</code>两个方法。看看官方文档是怎么介绍他们的。想看官方文档的<a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.aggregate" target="_blank" rel="noopener">点这里</a>。</p>
<blockquote>
<p>aggregate(<em>args, *</em>kwargs)¶</p>
<p>Returns a dictionary of aggregate values (averages, sums, etc.) calculated over the QuerySet. Each argument to aggregate() specifies a &gt;value that will be included in the dictionary that is returned.<br>The aggregation functions that are provided by Django are described in Aggregation Functions below. Since aggregates are also query<br>expressions, <code>you may combine aggregates with other aggregates or values to create complex aggregates.</code></p>
</blockquote>
<p>简单翻译过来就是说，aggregate会返回汇总值的字典，通过QuerySet进行计算。 aggregate() 的每个参数指定返回的字典中将要包含的值。特别是可以组合多个聚合以及值来创建复杂的聚合。呐，这就是思路。<br>官网的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from django.db.models import Count</span><br><span class="line">&gt;&gt;&gt; q = Blog.objects.aggregate(number_of_entries=Count(&apos;entry&apos;))</span><br><span class="line">&#123;&apos;number_of_entries&apos;: 16&#125;</span><br></pre></td></tr></table></figure></p>
<p>求和作者的Blog数目，是不是有点像mysql语句中的<code>count</code>之后的  <code>AS</code>啊？反正我感觉就是一模一样。<br>用在这个问题上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [8]: server.objects.filter(platform=&apos;jxdq&apos;).filter(zone=&apos;CW&apos;).aggregate(result=Count(&apos;zone&apos;))</span><br><span class="line">Out[8]: &#123;&apos;result&apos;: 3&#125;</span><br></pre></td></tr></table></figure></p>
<p>额，只是求和，跟我们需求的相差太大，<br>在<code>Stack Overflow</code>中有个<a href="https://stackoverflow.com/questions/10340684/group-concat-equivalent-in-django/40478702#40478702" target="_blank" rel="noopener">类似的问题</a>可以查考下。</p>
<p>现在需要django聚合类中的<code>annotate</code>方法。可以为每一个查询对象生成独立的汇总。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [28]: games.objects.filter(platform=&apos;jxdq&apos;).values(&apos;platform&apos;,&apos;zone&apos;).an</span><br><span class="line">    ...: notate(count=Count(0)).order_by(&apos;zone&apos;)</span><br><span class="line">Out[28]: &lt;QuerySet [&#123;&apos;count&apos;: 1, &apos;platform&apos;: u&apos;jxdq&apos;, &apos;zone&apos;: u&apos;BT&apos;&#125;, &#123;&apos;count</span><br><span class="line">    &apos;: 3, &apos;platform&apos;: u&apos;jxdq&apos;, &apos;zone&apos;: u&apos;CW&apos;&#125;]&gt;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，<code>annotate</code>可以把目标对象汇总，QuerySet中的每个对象都会被注上特定的值。<br>到这一步可以获取到聚合数值，但是还不能拿到具体聚合了哪些数值。<br>根据<code>stack overflow</code>的提示，定义一个函数。<code>相关参考文档放在最后。</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from django.db.models import Aggregate, CharField</span><br><span class="line"></span><br><span class="line">class GroupConcat(Aggregate):          # Aggregate的子类</span><br><span class="line">    # supports COUNT(distinct field)</span><br><span class="line">    function = &apos;GROUP_CONCAT&apos;</span><br><span class="line">    template = &apos;%(function)s(%(distinct)s%(expressions)s)&apos;</span><br><span class="line">    def __init__(self, expression, distinct=False,ordering=None,separator=&apos;,&apos;, **extra):</span><br><span class="line">        super(GroupConcat, self).__init__(</span><br><span class="line">            expression,</span><br><span class="line">            distinct=&apos;DISTINCT &apos; if distinct else &apos;&apos;,</span><br><span class="line">            ordering=&apos; ORDER BY %s&apos; %ordering if ordering is not None else &apos;&apos;,</span><br><span class="line">            separator=&apos; SEPARATOR &quot;%s&quot;&apos; % separator,</span><br><span class="line">            output_field=CharField(),</span><br><span class="line">            **extra)</span><br></pre></td></tr></table></figure></p>
<p>将被聚合的列值传入<code>GroupConcat</code>,就可以，<code>separator</code>默认分隔符是<code>,</code>号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GroupConcat(&apos;name&apos;,separator=&apos;,&apos;)</span><br></pre></td></tr></table></figure></p>
<p>放入整个查询语句中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">games.objects.filter(platform=&apos;jxdq&apos;).values(&apos;platform&apos;,&apos;zone&apos;).annotate(count=Count(0),name=GroupConcat(&apos;name&apos;,separator=&apos;,&apos;)).order_by(&apos;zone&apos;)</span><br></pre></td></tr></table></figure></p>
<p>输入结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [7]: games.objects.filter(platform=&apos;jxdq&apos;).values(&apos;platform&apos;,&apos;zone&apos;).annotat</span><br><span class="line">   ...: e(count=Count(0),name=GroupConcat(&apos;name&apos;,separator=&apos;,&apos;)).order_by(&apos;zone</span><br><span class="line">   ...: &apos;)</span><br><span class="line">Out[7]: &lt;QuerySet [&#123;&apos;count&apos;: 1, &apos;platform&apos;: u&apos;jxdq&apos;, &apos;name&apos;: u&apos;s1&apos;&#125;,&#123;&apos;count&apos;: 3, &apos;platform&apos;: u&apos;jxdq&apos;, &apos;name&apos;: u&apos;s1&apos;,&apos;s2&apos;,&apos;s3&apos;&#125;]</span><br></pre></td></tr></table></figure></p>
<p>复杂查询语句不熟的话最好就分段去凑…..个人建议。</p>
<h3 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h3><p><a href="https://code.ziqiangxuetang.com/django/django-queryset-advance.html" target="_blank" rel="noopener">https://code.ziqiangxuetang.com/django/django-queryset-advance.html</a><br><a href="http://usyiyi.cn/documents/Django_111/topics/db/aggregation.html" target="_blank" rel="noopener">http://usyiyi.cn/documents/Django_111/topics/db/aggregation.html</a><br><a href="http://usyiyi.cn/translate/Django_111/ref/models/querysets.html#django.db.models.query.QuerySet.aggregate" target="_blank" rel="noopener">http://usyiyi.cn/translate/Django_111/ref/models/querysets.html#django.db.models.query.QuerySet.aggregate</a></p>
]]></content>
      
        <categories>
            
            <category> web后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用docker-compose搭建mysql主从备份]]></title>
      <url>/2018/01/24/%E7%94%A8docker%E6%90%AD%E5%BB%BAmysql%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/</url>
      <content type="html"><![CDATA[<h3 id="版本工具"><a href="#版本工具" class="headerlink" title="版本工具"></a>版本工具</h3><blockquote>
<p>centos 7<br>docker 17.09<br>mysql 5.7<br>docker-compose 1.18</p>
</blockquote>
<p>这篇博客记录在一台宿主机上通过docker-compose创建2个mysql镜像，实现主从备份复制。docker-compose安装点击<a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">这里</a>看docker网站的文档,或者进入他的<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">github网址</a>,点击released选择最新的版本，推荐最新的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#安装命令</span><br><span class="line">pip install docker-compose</span><br><span class="line">#或者</span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.19.0-rc1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>
<h3 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h3><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><p><img src="/images/用docker-compose搭建mysql主从备份-1.png" alt="“图片描述”"></p>
<h5 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h5><p><strong>docker-compose.yml</strong>文件用YAML语言编写，<code>严格缩进</code>，略坑。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;2&quot; #compose区分version1和version2，Version 2支持更多的指令</span><br><span class="line">services:</span><br><span class="line">  mysql-master: # 给容器命名</span><br><span class="line">    image: mysql # 指定启动镜像，docker images查看你的 msyql镜像名，额，当然镜像ID也行。</span><br><span class="line">    networks: #指定静态网络</span><br><span class="line">       mysql: #网络名字</span><br><span class="line">          ipv4_address: 192.168.210.21 #IP</span><br><span class="line">    container_name: msyql-master</span><br><span class="line">    privileged: true # 加权限</span><br><span class="line">    volumes: #文件挂载</span><br><span class="line">      - /etc/docker/mysql/master/conf/my.cnf:/etc/mysql/my.cnf</span><br><span class="line">      - /etc/docker/mysql/master/data/:/var/lib/mysql/</span><br><span class="line">    restart: always #重启方式</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">      MYSQL_USER: suyu</span><br><span class="line">      MYSQL_PASSWORD: suyu.123</span><br><span class="line">    expose:</span><br><span class="line">      - 3306</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br><span class="line">  mysql-slave:</span><br><span class="line">    image: mysql</span><br><span class="line">    networks:</span><br><span class="line">       mysql:</span><br><span class="line">          ipv4_address: 192.168.210.22</span><br><span class="line">    container_name: msyql-slave</span><br><span class="line">    privileged: true</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/docker/mysql/slave/conf/my.cnf:/etc/mysql/my.cnf</span><br><span class="line">      - /etc/docker/mysql/slave/data/:/var/lib/mysql/</span><br><span class="line">    links: # mlave与master通讯</span><br><span class="line">      - msyql-master</span><br><span class="line">    restart: always</span><br><span class="line">    environment: #加入环境变量</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">      MYSQL_USER: suyu</span><br><span class="line">      MYSQL_PASSWORD: suyu.123</span><br><span class="line">    ports:</span><br><span class="line">      - 3307:3307</span><br><span class="line">networks: # 定义网络</span><br><span class="line">  mysql: # 网络名</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">      driver: default</span><br><span class="line">      config:</span><br><span class="line">      - subnet: 192.168.210.0/26</span><br></pre></td></tr></table></figure></p>
<p><strong>Dockerfile</strong>是创建镜像的文件，我直接在<code>docker-compose.yml</code>中指定了<code>image</code>，就不需要<code>build</code>,一个<code>docker-compose.yml</code>文件中，<code>image</code>和<code>build</code>是不能同时存在的，要么指定<code>iamge</code>，要么编写<code>Dockerfile</code>，重新<code>build</code>，好，这里略过。</p>
<blockquote>
<p>如果指定的image不存在，那么docker就会尝试去pull一个下来。</p>
</blockquote>
<p><strong>volumes</strong>是<code>docker-compose</code>的文件挂载指定字段。格式如下：</p>
<blockquote>
<p>- 宿主机的目录: 容器的需要挂载的目录: 挂载模式（比如有：ro只读模式：rw读写模式）</p>
</blockquote>
<p>我现在需要把mysql镜像的<code>my.cnf</code>文件挂出来编辑，把他挂载到我宿主机的<code>/etc/docker/mysql/slave/conf</code>下的<code>my.cnf</code>中，然后我只要编辑我本地的my.cnf文件就可以了。</p>
<p><strong>network</strong>是定义网络的字段，在宿主机中<code>ifconfig</code>查看ip，用于划分子网。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">eno16777736: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.203.129  netmask 255.255.255.0  broadcast 192.168.203.255</span><br><span class="line">        inet6 fe80::20c:29ff:fec8:64e5  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:c8:64:e5  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 4622  bytes 2613411 (2.4 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2187  bytes 381149 (372.2 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></p>
<p>宿主机ip是192.168.203.129，我定义容器的静态ip也是在192.168.0.0网段，不然容易出现ip池异常等等一系列恶心的问题。</p>
<p>接下来是mysql的配置文件<code>my.cnf</code>，先列出<code>master</code>的配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /tmp/mysql.sock</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=2</span><br><span class="line"></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line"></span><br><span class="line">skip-external-locking</span><br><span class="line"></span><br><span class="line">key_buffer_size = 1024M</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line">table_open_cache = 512</span><br><span class="line">sort_buffer_size = 2M</span><br><span class="line">net_buffer_length = 8K</span><br><span class="line">read_buffer_size = 2M</span><br><span class="line">read_rnd_buffer_size = 8M</span><br><span class="line">myisam_sort_buffer_size = 64M</span><br><span class="line">thread_cache_size = 8</span><br><span class="line">max_connections=1000</span><br><span class="line">query_cache_size= 128M</span><br><span class="line">innodb_buffer_pool_size=4096M</span><br><span class="line">slow-query-log=1</span><br><span class="line">long_query_time = 5</span><br><span class="line">slow-query-log-file=slow.log</span><br><span class="line">#default-character-set=utf8</span><br><span class="line">skip-name-resolve</span><br><span class="line">innodb_file_per_table</span><br><span class="line"></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_format=mixed</span><br><span class="line">server-id = 1</span><br><span class="line">expire_logs_days = 1</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"># no-auto-rehash</span><br><span class="line">auto-rehash</span><br><span class="line"># Remove the next comment character if you are not familiar with SQL</span><br><span class="line">#safe-updates</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size = 20M</span><br><span class="line">sort_buffer_size = 20M</span><br><span class="line">read_buffer = 2M</span><br><span class="line">write_buffer = 2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure></p>
<p><code>slave</code>的配置文件跟<code>master</code>的类似，就一点<code>server-id = 2</code>，不一样，一个<code>mysql</code>主从集群中<code>server-id</code>不能有重复的。</p>
<h3 id="生成容器"><a href="#生成容器" class="headerlink" title="生成容器"></a>生成容器</h3><blockquote>
<p>docker-compose up -d</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">Creating msyql-master ... done</span><br><span class="line">Creating msyql-slave ... done</span><br><span class="line">Creating msyql-slave ...</span><br></pre></td></tr></table></figure>
<p>然后查看容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS                      PORTS                              NAMES</span><br><span class="line">cf42251d5d27        mysql                     &quot;docker-entrypoint...&quot;   14 seconds ago      Up 12 seconds               3306/tcp, 0.0.0.0:3307-&gt;3307/tcp   msyql-slave</span><br><span class="line">0a94a3b57312        mysql                     &quot;docker-entrypoint...&quot;   15 seconds ago      Up 13 seconds               0.0.0.0:3306-&gt;3306/tcp             msyql-master</span><br></pre></td></tr></table></figure></p>
<p>看看<code>slave</code>的ip：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker inspect cf42251d5d27 |grep IPA</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;IPAMConfig&quot;: &#123;</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;192.168.210.22&quot;,</span><br></pre></td></tr></table></figure></p>
<p>看来容器貌似没有问题，接下来搭建主从。先进入<code>master</code>配置。</p>
<blockquote>
<p>docker exec -it 0a94a3b57312 /bin/bash<br><img src="/images/用docker-compose搭建mysql主从备份-5.png" alt="“图片描述”"><br>创建<code>slave</code>账户<code>mysql&gt; create user slave;</code></p>
<p>授权 GRANT REPLICATION SLAVE ON <em>.</em> TO ‘repl’@’%’ IDENTIFIED BY ‘slave’;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |      636 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>接下来修改<code>slave</code>,同理登录<code>mysql-slave</code>:</p>
<blockquote>
<p>docker exec -it cf42251d5d27 /bin/bash</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to master_host=&apos;mysql-master&apos;,master_port=3306,master_user=&apos;slave&apos;,master_password=&apos;slave&apos;,master_log_file=&apos;mysql-bin.000003&apos;,master_log_pos=920;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>mysql&gt; start slave<br><img src="/images/用docker-compose搭建mysql主从备份-2.png" alt="“图片描述”"><br>显示正常，这时候在<code>master</code>上随便改动点什么，看<code>slave</code>会不会跟着变化。</p>
</blockquote>
<p><img src="/images/用docker-compose搭建mysql主从备份-3.png" alt="“图片描述”"><br>上<code>slave</code>上面看看：<br><img src="/images/用docker-compose搭建mysql主从备份-4.png" alt="“图片描述”"><br>大功告成……睡觉。</p>
]]></content>
      
        <categories>
            
            <category> 容器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ansible踩坑札记]]></title>
      <url>/2018/01/18/ansible%E8%B8%A9%E5%9D%91%E6%9C%AD%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="版本工具"><a href="#版本工具" class="headerlink" title="版本工具"></a>版本工具</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> Centos7</li>
<li style="list-style: none"><input type="checkbox" checked> Ansible2.4.2</li>
<li style="list-style: none"><input type="checkbox" checked> Python2.7</li>
<li style="list-style: none"><input type="checkbox" checked> docker</li>
</ul>
<h3 id="主机分配"><a href="#主机分配" class="headerlink" title="主机分配"></a>主机分配</h3><blockquote>
<p>server: 192.168.203.129<br>client: 172.17.0.3（docker虚拟镜像，centos6.9版本）</p>
</blockquote>
<h3 id="Ansible安装"><a href="#Ansible安装" class="headerlink" title="Ansible安装"></a>Ansible安装</h3><p>基础件安装：</p>
<blockquote>
<ul>
<li>pip install setuptools PyYAML Jinja2 paramiko simplejson</li>
</ul>
</blockquote>
<p>ansible安装：</p>
<blockquote>
<ul>
<li>pip install ansible</li>
</ul>
</blockquote>
<p>安装好之后，查看下ansible的版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]# ansible --version</span><br><span class="line">ansible 2.4.2.0</span><br><span class="line">  config file = None</span><br><span class="line">  configured module search path = [u&apos;/root/.ansible/plugins/modules&apos;, u&apos;/usr/share/ansible/plugins/modules&apos;]</span><br><span class="line">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 2.7.5 (default, Nov 20 2015, 02:00:19) [GCC 4.8.5 20150623 (Red Hat 4.8.5-4)]</span><br></pre></td></tr></table></figure></p>
<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>ansible是需要ssh登录客户端,服务端和客户端都需要安装ssh,别忘记要启动</p>
<blockquote>
<ul>
<li>yum -y install openssh-server openssh-clients</li>
<li>/etc/init.d/sshd start</li>
</ul>
</blockquote>
<p>在<code>master</code>上生成秘钥</p>
<blockquote>
<ul>
<li>ssh-keygen</li>
</ul>
</blockquote>
<p>然后一路回车，在<code>/root/.ssh</code>处查看密钥，修改<code>client</code>的root密码，然后将生产的密钥<code>ssh-copy-id</code>到<code>client</code>。</p>
<blockquote>
<ul>
<li>ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.17.0.3</li>
</ul>
</blockquote>
<p>提示输入<code>client</code>的root密码，成功后可以测试登录</p>
<blockquote>
<ul>
<li>ssh root@172.17.0.3</li>
</ul>
</blockquote>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>到这一步算是安装完毕，现在开始修改配置文件。在<code>/etc/</code>目录下创建<code>ansible</code>目录，创建ansible.cfg文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/ansible ᐅ vim ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">hostfile=/etc/ansible/hosts</span><br><span class="line">private_key_file = /root/.ssh/id_rsa</span><br><span class="line">remote_user = root</span><br><span class="line">remote_port = 22</span><br><span class="line">host_key_checking = False</span><br></pre></td></tr></table></figure></p>
<p>创建hosts文件，用于存储客户端ip和分组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/ansible ᐅ vim hosts</span><br><span class="line">172.17.0.3</span><br></pre></td></tr></table></figure></p>
<p>修改好后，就可以测试ansible了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ansible]# ansible &apos;172.17.0.3&apos; -m ping</span><br><span class="line">172.17.0.3 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 运维 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
