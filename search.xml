<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[prometheus 监控 kube-controller-manager、kube-scheduler、kube-proxy]]></title>
      <url>/2020/05/14/prometheus-%E7%9B%91%E6%8E%A7-kube-controller-manager%E3%80%81kube-scheduler%E3%80%81kube-proxy/</url>
      <content type="html"><![CDATA[<h4 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/kube-controller-manager.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改成：</span><br><span class="line">--address=0.0.0.0</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kube-controller-manager</span><br></pre></td></tr></table></figure>
<p>添加<code>service</code>、<code>endpoint</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  name: kube-controller-manager</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-controller-manager</span><br><span class="line">spec:</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-metrics</span><br><span class="line">    port: 10252</span><br><span class="line">    targetPort: 10252</span><br><span class="line">    protocol: TCP</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-controller-manager</span><br><span class="line">  name: kube-controller-manager</span><br><span class="line">  namespace: kube-system</span><br><span class="line">subsets:</span><br><span class="line">- addresses:</span><br><span class="line">  - ip: k8s-master1</span><br><span class="line">  - ip: k8s-master2</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-metrics</span><br><span class="line">    port: 10252</span><br><span class="line">    protocol: TCP</span><br></pre></td></tr></table></figure>
<p>prometheus 添加监控项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- job_name: &apos;kube-controller-manager&apos;</span><br><span class="line">    scheme: http</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;k8s-master1:10252&apos;,&apos;k8s-master:10252&apos;]</span><br></pre></td></tr></table></figure>
<p>然后重新加载prometheus配置</p>
<p>一定要记得修改配置，不然就会出现如下错误。<br><img src="https://s1.ax1x.com/2020/05/14/YB32RK.png" alt="image"></p>
<h4 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/kube-scheduler.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改成：</span><br><span class="line">--address=0.0.0.0</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kube-scheduler</span><br></pre></td></tr></table></figure>
<p>添加<code>service</code>、<code>endpoint</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-scheduler</span><br><span class="line">  name: kube-scheduler</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-metrics</span><br><span class="line">    port: 10251</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 10251</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-scheduler</span><br><span class="line">  name: kube-scheduler</span><br><span class="line">  namespace: kube-system</span><br><span class="line">subsets:</span><br><span class="line">- addresses:</span><br><span class="line">    - ip: k8s-master1</span><br><span class="line">    - ip: k8s-master2</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-metrics</span><br><span class="line">    port: 10251</span><br><span class="line">    protocol: TCP</span><br></pre></td></tr></table></figure>
<h4 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/kube-proxy.service</span><br></pre></td></tr></table></figure>
<p>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--metrics-bind-address=0.0.0.0</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kube-scheduler</span><br></pre></td></tr></table></figure>
<p>添加<code>service</code>、<code>endpoint</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-proxy</span><br><span class="line">  name: kube-proxy</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-metrics</span><br><span class="line">    port: 10249</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 10249</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-proxy</span><br><span class="line">  name: kube-proxy</span><br><span class="line">  namespace: kube-system</span><br><span class="line">subsets:</span><br><span class="line">- addresses:</span><br><span class="line">  - ip: k8s-node1</span><br><span class="line">  - ip: k8s-node2</span><br><span class="line">  - ip: k8s-node3</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-metrics</span><br><span class="line">    port: 10249</span><br><span class="line">    protocol: TCP</span><br></pre></td></tr></table></figure>
<p>修改prometheus配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- job_name: &apos;kube-proxy&apos;</span><br><span class="line">  scheme: http</span><br><span class="line">  static_configs:</span><br><span class="line">    - targets: [&apos;192.168.3.12:10249&apos;,&apos;192.168.3.13:10249&apos;,&apos;192.168.3.15:10249&apos;]</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/05/14/YBrHxJ.png" alt="image"></p>
<p>参考链接：</p>
<p><a href="http://www.ksky.net/archives/107" target="_blank" rel="noopener">http://www.ksky.net/archives/107</a></p>
<p><a href="https://i4t.com/4528.html" target="_blank" rel="noopener">https://i4t.com/4528.html</a></p>
]]></content>
      
        <categories>
            
            <category> kubernetes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二进制prometheus 监控 nginx、mysql、node]]></title>
      <url>/2020/05/14/%E4%BA%8C%E8%BF%9B%E5%88%B6prometheus-%E7%9B%91%E6%8E%A7-nginx%E3%80%81mysql%E3%80%81node/</url>
      <content type="html"><![CDATA[<p>我总感觉用二进制运行<code>prometheus</code>会比在容器里运行跟保险一点。毕竟不能把所有鸡蛋放一个篮子里。<code>kubernetes</code>亦是如此。</p>
<h3 id="prometheus下载安装"><a href="#prometheus下载安装" class="headerlink" title="prometheus下载安装"></a>prometheus下载安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/prometheus/prometheus/releases/download/v2.18.0/prometheus-2.18.0.linux-amd64.tar.gz</span><br><span class="line">tar -zxvf prometheus-2.18.0.linux-amd64.tar.gz</span><br><span class="line">mv prometheus-2.18.0.linux-amd64 /usr/local/</span><br></pre></td></tr></table></figure>
<h3 id="配置监控node"><a href="#配置监控node" class="headerlink" title="配置监控node"></a>配置监控node</h3><h4 id="下载node-exporter"><a href="#下载node-exporter" class="headerlink" title="下载node_exporter"></a>下载node_exporter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz</span><br><span class="line">tar -zxvf node_exporter-0.18.1.linux-amd64.tar.gz</span><br><span class="line">cp node_exporter /usr/local/bin/</span><br></pre></td></tr></table></figure>
<h4 id="添加启动项"><a href="#添加启动项" class="headerlink" title="添加启动项"></a>添加启动项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/node_exporter.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Node Export</span><br><span class="line">After=network.target</span><br><span class="line">Documentation=https://prometheus.io/docs/guides/node-exporter/</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">WorkingDirectory=/tmp/</span><br><span class="line">ExecStart=/usr/local/bin/node_exporter</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<h4 id="修改prometheus配置"><a href="#修改prometheus配置" class="headerlink" title="修改prometheus配置"></a>修改prometheus配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- job_name: &apos;node_exporter&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">          - &apos;xx.xx.xx.xx:9100&apos;</span><br></pre></td></tr></table></figure>
<h3 id="配置监控mysql"><a href="#配置监控mysql" class="headerlink" title="配置监控mysql"></a>配置监控mysql</h3><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysqld_exporter-0.12.1.linux-amd64.tar.gz</span><br><span class="line">mv mysqld_exporter-0.12.1.linux-amd64 /usr/local/mysqld_exporter</span><br></pre></td></tr></table></figure>
<h4 id="修改启动方式"><a href="#修改启动方式" class="headerlink" title="修改启动方式"></a>修改启动方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/mysqld_exporter.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=mysqld_exporter</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=mysql</span><br><span class="line">Environment=DATA_SOURCE_NAME=用户名:密码@(localhost:3306)/</span><br><span class="line">ExecStart=/usr/local/bin/mysqld_exporter --web.listen-address=0.0.0.0:9104 </span><br><span class="line">  --config.my-cnf /etc/my.cnf \</span><br><span class="line">  --collect.slave_status \</span><br><span class="line">  --collect.slave_hosts \</span><br><span class="line">  --log.level=error \</span><br><span class="line">  --collect.info_schema.processlist \</span><br><span class="line">  --collect.info_schema.innodb_metrics \</span><br><span class="line">  --collect.info_schema.innodb_tablespaces \</span><br><span class="line">  --collect.info_schema.innodb_cmp \</span><br><span class="line">  --collect.info_schema.innodb_cmpmem </span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.targe</span><br></pre></td></tr></table></figure>
<h4 id="修改prometheus配置-1"><a href="#修改prometheus配置-1" class="headerlink" title="修改prometheus配置"></a>修改prometheus配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- job_name: &apos;mysql&apos;</span><br><span class="line">  static_configs:</span><br><span class="line">    - targets: [&apos;xx.xx.xx.xx:9104&apos;]</span><br></pre></td></tr></table></figure>
<h3 id="配置监控nginx"><a href="#配置监控nginx" class="headerlink" title="配置监控nginx"></a>配置监控nginx</h3><h4 id="下载配置"><a href="#下载配置" class="headerlink" title="下载配置"></a>下载配置</h4><p>nginx加载<code>nginx-module-vts</code>模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/vozlt/nginx-module-vts.git</span><br></pre></td></tr></table></figure>
<p>我这里用的是nginx1.15，<code>nginx-module-vts</code>模块跟nginx版本有严格的版本契合，一定要去github上查到对应的版本来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.14.1</span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_flv_module --with-http_gzip_static_module --add-module=/data/nginx-module-vts</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p>
<p>查看是否成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ /usr/local/nginx/sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.14.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_flv_module --with-http_gzip_static_module --add-module=/data/nginx-module-vts</span><br></pre></td></tr></table></figure>
<p>没问题欸~</p>
<p>nginx-vts-exporter：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/hnlq715/nginx-vts-exporter/releases/download/v0.10.3/nginx-vts-exporter-0.10.3.linux-amd64.tar.gz</span><br><span class="line">tar -zxvf nginx-vts-exporter-0.10.3.linux-amd64.tar.gz</span><br><span class="line">cd nginx-vts-exporter-0.10.3.linux-amd64</span><br><span class="line">chown -R root:root nginx-vts-exporter</span><br></pre></td></tr></table></figure></p>
<p>启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./nginx-vts-exporter -nginx.scrape_uri=http://xx.xx.xx.xx:80/status/format/json -telemetry.address=&quot;xx.xx.xx.xx.:9913&quot; &gt;&gt; ./nohup.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h4 id="修改nginx配置"><a href="#修改nginx配置" class="headerlink" title="修改nginx配置"></a>修改nginx配置</h4><p>这里的默认配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    # 关键是这两行</span><br><span class="line">    vhost_traffic_status_zone;</span><br><span class="line">    vhost_traffic_status_filter_by_host on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        location /status &#123;</span><br><span class="line">                # 开启监控</span><br><span class="line">               vhost_traffic_status_display;</span><br><span class="line">               vhost_traffic_status_display_format html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<h4 id="修改prometheus-yml配置"><a href="#修改prometheus-yml配置" class="headerlink" title="修改prometheus.yml配置"></a>修改prometheus.yml配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/prometheus/conf.d/nginx_node.json</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;labels&quot;: &#123;</span><br><span class="line">                &quot;desc&quot;: &quot;nginx3.5&quot;,</span><br><span class="line">                &quot;group&quot;: &quot;nginx&quot;,</span><br><span class="line">                &quot;host_ip&quot;: &quot;xx.xx.xx.xx.&quot;,</span><br><span class="line">                &quot;hostname&quot;: &quot;xx.xx.xx.xx&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;targets&quot;: [</span><br><span class="line">                &quot;192.168.3.5:9913&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">~</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- job_name: &apos;nginx_node&apos;</span><br><span class="line">    scrape_interval: 2m</span><br><span class="line">    scrape_timeout: 120s</span><br><span class="line">    static_configs:</span><br><span class="line">    file_sd_configs:</span><br><span class="line">      - files:</span><br><span class="line">          - /usr/local/prometheus/conf.d/nginx_node.json</span><br><span class="line">    honor_labels: true</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> kubernetes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[prometheus operator 监控etcd]]></title>
      <url>/2020/05/08/prometheus-operator-%E7%9B%91%E6%8E%A7etcd/</url>
      <content type="html"><![CDATA[<h4 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h4><p>监控etcd需要证书验证，我是用二进制运行的etcd，在etcd节点上查看证书的位置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node1 ~]# ps uax|grep etcd</span><br><span class="line">root      1274  1.5  4.7 10818908 192824 ?     Ssl  4月24 301:07 /etc/kubernetes/bin/etcd --name=etcd1 --cert-file=/etc/etcd/ssl/etcd.pem --key-file=/etc/etcd/ssl/etcd-key.pem --peer-cert-file=/etc/etcd/ssl/etcd.pem --peer-key-file=/etc/etcd/ssl/etcd-key.pem --trusted-ca-file=/etc/kubernetes/ssl/ca.pem --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem --initial-advertise-peer-urls=https://192.168.3.12:2380 --listen-peer-urls=https://192.168.3.12:2380 --listen-client-urls=https://192.168.3.12:2379,http://127.0.0.1:2379 --advertise-client-urls=https://192.168.3.12:2379 --initial-cluster-token=etcd-cluster-0 --initial-cluster=etcd1=https://192.168.3.12:2380,etcd2=https://192.168.3.13:2380,etcd3=https://192.168.3.15:2380 --initial-cluster-state=new --data-dir=/var/lib/etcd</span><br></pre></td></tr></table></figure>
<p>将需要的etcd证书保存到secret对象etcd-certs中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n monitoring create secret generic etcd-certs --from-file=/etc/etcd/ssl/etcd.pem --from-file=/etc/etcd/ssl/etcd-key.pem --from-file=/etc/kubernetes/ssl/ca.pem</span><br></pre></td></tr></table></figure>
<h4 id="修改yaml文件"><a href="#修改yaml文件" class="headerlink" title="修改yaml文件"></a>修改yaml文件</h4><p>修改<code>prometheus-prometheus.yaml</code> ，写入secret</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">....省略若干字....</span><br><span class="line"></span><br><span class="line">podMonitorNamespaceSelector: &#123;&#125;</span><br><span class="line">  podMonitorSelector: &#123;&#125;</span><br><span class="line">  replicas: 2</span><br><span class="line">  secrets:</span><br><span class="line">  - etcd-certs</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      memory: 400Mi</span><br><span class="line">  ruleSelector:</span><br><span class="line">  </span><br><span class="line">....省略若干字....</span><br></pre></td></tr></table></figure>
<p>创建<code>prometheus-service-etcd.yml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: etcd</span><br><span class="line">  name: etcd-k8s</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - name: port</span><br><span class="line">    port: 2379</span><br><span class="line">    protocol: TCP</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  clusterIP: None</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  name: etcd-k8s</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: etcd</span><br><span class="line">subsets:</span><br><span class="line">- addresses:</span><br><span class="line">  - ip: etcd-node1的ip</span><br><span class="line">    nodeName: etcd1</span><br><span class="line">  - ip: etcd-node2的ip</span><br><span class="line">    nodeName: etcd2</span><br><span class="line">  - ip: etcd-node3的ip</span><br><span class="line">    nodeName: etcd3</span><br><span class="line">  ports:</span><br><span class="line">  - name: port</span><br><span class="line">    port: 2379</span><br><span class="line">    protocol: TCP</span><br></pre></td></tr></table></figure>
<p>创建<code>prometheus-serviceMonitorEtcd.yml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: monitoring.coreos.com/v1</span><br><span class="line">kind: ServiceMonitor</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: etcd-k8s</span><br><span class="line">  name: etcd-k8s</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  endpoints:</span><br><span class="line">  - port: port</span><br><span class="line">    interval: 30s</span><br><span class="line">    scheme: https</span><br><span class="line">    #port: https-metrics</span><br><span class="line">    tlsConfig:</span><br><span class="line">      caFile: /etc/prometheus/secrets/etcd-certs/ca.pem</span><br><span class="line">      certFile: /etc/prometheus/secrets/etcd-certs/etcd.pem</span><br><span class="line">      keyFile: /etc/prometheus/secrets/etcd-certs/etcd-key.pem</span><br><span class="line">      insecureSkipVerify: true</span><br><span class="line">  jobLabel: k8s-app</span><br><span class="line">  namespaceSelector:</span><br><span class="line">    matchNames:</span><br><span class="line">    - kube-system</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: etcd</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/05/08/YmOptA.png" alt="image"></p>
<p>参考链接：</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="https://blog.csdn.net/weixin_41533951/article/details/101264092" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41533951/article/details/101264092</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> kubernetes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kube-prometheus监控]]></title>
      <url>/2020/05/07/kube-prometheus%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<p><code>kube-prometheus</code>项目地址<code>https://github.com/coreos/kube-prometheus</code></p>
<table>
<thead>
<tr>
<th>kube-prometheus stack</th>
<th>Kubernetes 1.14</th>
<th>Kubernetes 1.15</th>
<th>Kubernetes 1.16</th>
<th>Kubernetes 1.17</th>
<th>Kubernetes 1.18</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>release-0.3</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✗</td>
</tr>
<tr>
<td><code>release-0.4</code></td>
<td>✗</td>
<td>✗</td>
<td>✔</td>
<td>✔</td>
<td>✗</td>
</tr>
<tr>
<td><code>release-0.5</code></td>
<td>✗</td>
<td>✗</td>
<td>✗</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>HEAD</code></td>
<td>✗</td>
<td>✗</td>
<td>✗</td>
<td>✗</td>
<td>✔</td>
</tr>
</tbody>
</table>
<p>yaml文件路径<code>manifests</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── alertmanager-alertmanager.yaml</span><br><span class="line">├── alertmanager-secret.yaml</span><br><span class="line">├── alertmanager-serviceAccount.yaml</span><br><span class="line">├── alertmanager-serviceMonitor.yaml</span><br><span class="line">├── alertmanager-service.yaml</span><br><span class="line">├── grafana-dashboardDatasources.yaml</span><br><span class="line">├── grafana-dashboardDefinitions.yaml</span><br><span class="line">├── grafana-dashboardSources.yaml</span><br><span class="line">├── grafana-deployment.yaml</span><br><span class="line">├── grafana-serviceAccount.yaml</span><br><span class="line">├── grafana-serviceMonitor.yaml</span><br><span class="line">├── grafana-service.yaml</span><br><span class="line">├── kube-state-metrics-clusterRoleBinding.yaml</span><br><span class="line">├── kube-state-metrics-clusterRole.yaml</span><br><span class="line">├── kube-state-metrics-deployment.yaml</span><br><span class="line">├── kube-state-metrics-serviceAccount.yaml</span><br><span class="line">├── kube-state-metrics-serviceMonitor.yaml</span><br><span class="line">├── kube-state-metrics-service.yaml</span><br><span class="line">├── node-exporter-clusterRoleBinding.yaml</span><br><span class="line">├── node-exporter-clusterRole.yaml</span><br><span class="line">├── node-exporter-daemonset.yaml</span><br><span class="line">├── node-exporter-serviceAccount.yaml</span><br><span class="line">├── node-exporter-serviceMonitor.yaml</span><br><span class="line">├── node-exporter-service.yaml</span><br><span class="line">├── prometheus-adapter-apiService.yaml</span><br><span class="line">├── prometheus-adapter-clusterRoleAggregatedMetricsReader.yaml</span><br><span class="line">├── prometheus-adapter-clusterRoleBindingDelegator.yaml</span><br><span class="line">├── prometheus-adapter-clusterRoleBinding.yaml</span><br><span class="line">├── prometheus-adapter-clusterRoleServerResources.yaml</span><br><span class="line">├── prometheus-adapter-clusterRole.yaml</span><br><span class="line">├── prometheus-adapter-configMap.yaml</span><br><span class="line">├── prometheus-adapter-deployment.yaml</span><br><span class="line">├── prometheus-adapter-roleBindingAuthReader.yaml</span><br><span class="line">├── prometheus-adapter-serviceAccount.yaml</span><br><span class="line">├── prometheus-adapter-service.yaml</span><br><span class="line">├── prometheus-clusterRoleBinding.yaml</span><br><span class="line">├── prometheus-clusterRole.yaml</span><br><span class="line">├── prometheus-operator-serviceMonitor.yaml</span><br><span class="line">├── prometheus-prometheus.yaml</span><br><span class="line">├── prometheus-roleBindingConfig.yaml</span><br><span class="line">├── prometheus-roleBindingSpecificNamespaces.yaml</span><br><span class="line">├── prometheus-roleConfig.yaml</span><br><span class="line">├── prometheus-roleSpecificNamespaces.yaml</span><br><span class="line">├── prometheus-rules.yaml</span><br><span class="line">├── prometheus-serviceAccount.yaml</span><br><span class="line">├── prometheus-serviceMonitorApiserver.yaml</span><br><span class="line">├── prometheus-serviceMonitorCoreDNS.yaml</span><br><span class="line">├── prometheus-serviceMonitorKubeControllerManager.yaml</span><br><span class="line">├── prometheus-serviceMonitorKubelet.yaml</span><br><span class="line">├── prometheus-serviceMonitorKubeScheduler.yaml</span><br><span class="line">├── prometheus-serviceMonitor.yaml</span><br><span class="line">├── prometheus-service.yaml</span><br><span class="line">└── setup</span><br><span class="line">    ├── 0namespace-namespace.yaml</span><br><span class="line">    ├── prometheus-operator-0alertmanagerCustomResourceDefinition.yaml</span><br><span class="line">    ├── prometheus-operator-0podmonitorCustomResourceDefinition.yaml</span><br><span class="line">    ├── prometheus-operator-0prometheusCustomResourceDefinition.yaml</span><br><span class="line">    ├── prometheus-operator-0prometheusruleCustomResourceDefinition.yaml</span><br><span class="line">    ├── prometheus-operator-0servicemonitorCustomResourceDefinition.yaml</span><br><span class="line">    ├── prometheus-operator-0thanosrulerCustomResourceDefinition.yaml</span><br><span class="line">    ├── prometheus-operator-clusterRoleBinding.yaml</span><br><span class="line">    ├── prometheus-operator-clusterRole.yaml</span><br><span class="line">    ├── prometheus-operator-deployment.yaml</span><br><span class="line">    ├── prometheus-operator-serviceAccount.yaml</span><br><span class="line">    └── prometheus-operator-service.yaml</span><br></pre></td></tr></table></figure></p>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><h5 id="修改prometheus-serviceMonitorKubelet-yaml中的port"><a href="#修改prometheus-serviceMonitorKubelet-yaml中的port" class="headerlink" title="修改prometheus-serviceMonitorKubelet.yaml中的port"></a><code>修改prometheus-serviceMonitorKubelet.yaml中的port</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#port: https-metrics 改成 http</span><br><span class="line">port: http-metrics</span><br><span class="line">relabelings:</span><br><span class="line">- sourceLabels:</span><br><span class="line">  - __metrics_path__</span><br><span class="line">  targetLabel: metrics_path</span><br><span class="line">#scheme: https 改成 http</span><br><span class="line">scheme: http</span><br><span class="line">....省略若干字....</span><br><span class="line">#port: https-metrics</span><br><span class="line">port: http-metrics</span><br><span class="line">relabelings:</span><br><span class="line">- sourceLabels:</span><br><span class="line">  - __metrics_path__</span><br><span class="line">  targetLabel: metrics_path</span><br><span class="line">#scheme: https</span><br><span class="line">scheme: http</span><br></pre></td></tr></table></figure>
<h5 id="修改alertmanager-service-yaml-添加nodeport"><a href="#修改alertmanager-service-yaml-添加nodeport" class="headerlink" title="修改alertmanager-service.yaml,添加nodeport"></a><code>修改alertmanager-service.yaml,添加nodeport</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">....省略若干字....</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 9093</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 30093 # 添加的nodeport</span><br><span class="line">  type: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    alertmanager: main</span><br><span class="line">    app: alertmanager</span><br><span class="line">  sessionAffinity: ClientIP</span><br></pre></td></tr></table></figure>
<h5 id="修改grafana-service-yaml，添加nodeport"><a href="#修改grafana-service-yaml，添加nodeport" class="headerlink" title="修改grafana-service.yaml，添加nodeport"></a><code>修改grafana-service.yaml，添加nodeport</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">....省略若干字....</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 3000</span><br><span class="line">    targetPort: http</span><br><span class="line">    nodePort: 32000</span><br><span class="line">  type: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: grafana</span><br></pre></td></tr></table></figure>
<h5 id="修改prometheus-service-yaml-添加nodeport"><a href="#修改prometheus-service-yaml-添加nodeport" class="headerlink" title="修改prometheus-service.yaml,添加nodeport"></a><code>修改prometheus-service.yaml,添加nodeport</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">....省略若干字....</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 9090</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 30090</span><br><span class="line">  type: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">    prometheus: k8s</span><br><span class="line">  sessionAffinity: ClientIP</span><br></pre></td></tr></table></figure>
<h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd manifests</span><br><span class="line">kubectl apply -f ./setip</span><br><span class="line">kubectl apply -f ./</span><br></pre></td></tr></table></figure>
<p>然后打开<code>你的node节点ip:30090</code>就可以看到prometheus界面。</p>
<p>参考链接：</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="https://www.jianshu.com/p/2fbbe767870d" target="_blank" rel="noopener">https://www.jianshu.com/p/2fbbe767870d</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="https://github.com/coreos/kube-prometheus" target="_blank" rel="noopener">https://github.com/coreos/kube-prometheus</a></li>
<li style="list-style: none"><input type="checkbox" checked> 修改镜像地址的yaml文件：<a href="https://gitee.com/mylanvv/kube-prometheus.git" target="_blank" rel="noopener">https://gitee.com/mylanvv/kube-prometheus.git</a></li>
<li style="list-style: none"><input type="checkbox" checked> <a href="https://blog.csdn.net/qq_40460909/article/details/105540145" target="_blank" rel="noopener">https://blog.csdn.net/qq_40460909/article/details/105540145</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> kubernetes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx结合kubernetes实现fancyindex目录索引]]></title>
      <url>/2020/02/26/nginx%E7%BB%93%E5%90%88kubernetes%E5%AE%9E%E7%8E%B0fancyindex%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<p>根据上一篇<a href="http://zenganiu.xyz/2020/02/26/nginx%E4%BD%BF%E7%94%A8fancyindex%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95/" target="_blank" rel="noopener">nginx使用fancyindex目录索引</a>，部署到kubernetes1.16。</p>
<h4 id="工具版本："><a href="#工具版本：" class="headerlink" title="工具版本："></a>工具版本：</h4><ul>
<li style="list-style: none"><input type="checkbox" checked> kubernetes1.16</li>
<li style="list-style: none"><input type="checkbox" checked> nginx1.16</li>
<li style="list-style: none"><input type="checkbox" checked> centos7</li>
</ul>
<h4 id="Dockerfile构建镜像"><a href="#Dockerfile构建镜像" class="headerlink" title="Dockerfile构建镜像"></a>Dockerfile构建镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:latest AS alpine-base</span><br><span class="line">WORKDIR /usr/local</span><br><span class="line">COPY nginx-1.16.0.tar.gz /usr/local</span><br><span class="line">#更换apline的源为阿里云的</span><br><span class="line">RUN echo &quot;http://mirrors.aliyun.com/alpine/latest-stable/main/&quot; &gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    echo &quot;http://mirrors.aliyun.com/alpine/latest-stable/community/&quot; &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    apk update &amp;&amp; \</span><br><span class="line">#安装wget 和git 我们为了使镜像最小化这个都放在另外一个镜像里面来实现</span><br><span class="line">    apk add --no-cache wget git &amp;&amp; \</span><br><span class="line">#解压nginx包</span><br><span class="line">    tar xvf nginx-1.16.0.tar.gz</span><br><span class="line"></span><br><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line">WORKDIR /data</span><br><span class="line">COPY ngx-fancyindex-master.tar.gz /data</span><br><span class="line">RUN cd /data &amp;&amp; tar -zxvf ngx-fancyindex-master.tar.gz</span><br><span class="line"># 创建存放文件资源的目录</span><br><span class="line">RUN mkdir -p /ftpfile/download/</span><br><span class="line">RUN mkdir -p /data/Nginx-Fancyindex-Theme/</span><br><span class="line">ADD fancyindex.conf /data/Nginx-Fancyindex-Theme/fancyindex.conf</span><br><span class="line"></span><br><span class="line">WORKDIR /root</span><br><span class="line">#从上面一个镜像中把我们刚才下载安装的包拷贝到这个里面</span><br><span class="line">COPY --from=alpine-base /usr/local/nginx-1.16.0 /usr/local/nginx-1.16.0</span><br><span class="line"></span><br><span class="line">RUN echo &quot;http://mirrors.aliyun.com/alpine/latest-stable/main/&quot; &gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    echo &quot;http://mirrors.aliyun.com/alpine/latest-stable/community/&quot; &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    apk update &amp;&amp; \</span><br><span class="line">#安装编译安装需要的依赖</span><br><span class="line">    apk add --no-cache gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl &amp;&amp; \</span><br><span class="line">    cd /usr/local/nginx-1.16.0/ &amp;&amp; \</span><br><span class="line">#执行编译安装</span><br><span class="line">    ./configure --prefix=/etc/nginx \</span><br><span class="line">    --sbin-path=/usr/sbin/nginx \</span><br><span class="line">    --modules-path=/usr/lib/nginx/modules \</span><br><span class="line">    --conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">    --error-log-path=/var/log/nginx/error.log \</span><br><span class="line">    --http-log-path=/var/log/nginx/access.log \</span><br><span class="line">    --pid-path=/var/run/nginx.pid \</span><br><span class="line">    --lock-path=/var/run/nginx.lock \</span><br><span class="line">    --http-client-body-temp-path=/var/cache/nginx/client_temp \</span><br><span class="line">    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \</span><br><span class="line">    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \</span><br><span class="line">    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line">    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">#指定安装扩展模块的位置</span><br><span class="line">    --add-module=/data/ngx-fancyindex-master \</span><br><span class="line">    --with-compat \</span><br><span class="line">    --with-file-aio \</span><br><span class="line">    --with-threads \</span><br><span class="line">    --with-http_addition_module \</span><br><span class="line">    --with-http_auth_request_module \</span><br><span class="line">    --with-http_dav_module \</span><br><span class="line">    --with-http_flv_module \</span><br><span class="line">    --with-http_gunzip_module \</span><br><span class="line">    --with-http_gzip_static_module \</span><br><span class="line">    --with-http_mp4_module \</span><br><span class="line">    --with-http_random_index_module \</span><br><span class="line">    --with-http_realip_module \</span><br><span class="line">    --with-http_secure_link_module \</span><br><span class="line">    --with-http_slice_module \</span><br><span class="line">    --with-http_ssl_module \</span><br><span class="line">    --with-http_stub_status_module \</span><br><span class="line">    --with-http_sub_module \</span><br><span class="line">    --with-http_v2_module \</span><br><span class="line">    --with-mail \</span><br><span class="line">    --with-mail_ssl_module \</span><br><span class="line">    --with-stream --with-stream_realip_module \</span><br><span class="line">    --with-stream_ssl_module \</span><br><span class="line">    --with-stream_ssl_preread_module \</span><br><span class="line">    --with-cc-opt=&apos;-g -O2 -fdebug-prefix-map=/data/builder/debuild/nginx-1.16.0/debian/debuild-base/nginx-1.16.0=. -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC&apos; \</span><br><span class="line">    --with-ld-opt=&apos;-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie&apos; &amp;&amp; \</span><br><span class="line">    make &amp;&amp; make install &amp;&amp; \</span><br><span class="line">    mkdir -p /var/cache/nginx/client_temp &amp;&amp; \</span><br><span class="line">    rm -rf /usr/local/nginx-1.16.0</span><br><span class="line">#把主题拷贝到网站根目录下</span><br><span class="line">#COPY --from=alpine-base /usr/local/./Nginx-Fancyindex-Theme /etc/nginx/html</span><br><span class="line"></span><br><span class="line">ADD nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">COPY html.tar.gz /etc/nginx/</span><br><span class="line">WORKDIR /etc/nginx/</span><br><span class="line">RUN rm -rf html/*</span><br><span class="line">RUN tar -zxvf html.tar.gz</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;nginx -g &apos;daemon off;&apos;&quot;]</span><br></pre></td></tr></table></figure>
<h5 id="将必须的文件拷贝到目录："><a href="#将必须的文件拷贝到目录：" class="headerlink" title="将必须的文件拷贝到目录："></a>将必须的文件拷贝到目录：</h5><p>这些文件在<a href="http://zenganiu.xyz/2020/02/26/nginx%E4%BD%BF%E7%94%A8fancyindex%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95/" target="_blank" rel="noopener">nginx使用fancyindex目录索引</a>有下载的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root    3900 12月 24 15:26 Dockerfile</span><br><span class="line">-rw-r--r-- 1 root root     477 1月  31 2019 fancyindex.conf</span><br><span class="line">-rw-r--r-- 1 root root 1008700 12月 23 17:33 html.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 1032345 12月 24 14:38 nginx-1.16.0.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root     817 12月 24 15:33 nginx.conf</span><br><span class="line">-rw-r--r-- 1 root root    1006 12月 24 16:04 nginx-file-nodeport.yml</span><br><span class="line">-rw-r--r-- 1 root root   25657 12月 24 10:05 ngx-fancyindex-master.tar.gz</span><br></pre></td></tr></table></figure></p>
<p>执行构建镜像命令：</p>
<blockquote>
<p>docker build -t harbor.xxx.com/xxx/ftpfile .</p>
</blockquote>
<p>上传镜像到仓库：</p>
<blockquote>
<p>docker push harbor.xxx.com/xxx/ftpfile</p>
</blockquote>
<h4 id="使用nfs存储"><a href="#使用nfs存储" class="headerlink" title="使用nfs存储"></a>使用nfs存储</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NFS服务器操作如下</span><br><span class="line">mkdir -p /home/kvm</span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl enable rpcbind</span><br><span class="line">systemctl enable nfs</span><br><span class="line">echo &quot;/home/kvm  *(rw,no_root_squash,sync)&quot; &gt;&gt;/etc/exports</span><br></pre></td></tr></table></figure>
<p>使用的时候直接挂载目录就行。</p>
<h4 id="deploy和server"><a href="#deploy和server" class="headerlink" title="deploy和server"></a>deploy和server</h4><p>nginx-file-nodeport.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-file</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx-file</span><br><span class="line">    release: canary</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 8082</span><br><span class="line">    targetPort: 80</span><br><span class="line">    nodePort: 30002 # 定义端口</span><br><span class="line">    # 使用nodeport方式提供服务</span><br><span class="line">  type: NodePort</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-file-deploy</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx-file</span><br><span class="line">      release: canary</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-file</span><br><span class="line">        release: canary</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-file</span><br><span class="line">        image: harbor.xxx.com/xxx/ftpfile:latest</span><br><span class="line">        ports:</span><br><span class="line">        - name: httpd</span><br><span class="line">          containerPort: 80</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: download-file</span><br><span class="line">          mountPath: /ftpfile/download</span><br><span class="line">      imagePullSecrets:        #使用的secret</span><br><span class="line">      - name: registry-secret</span><br><span class="line">      volumes:</span><br><span class="line">      - name: download-file</span><br><span class="line">        nfs:</span><br><span class="line">          server: 1.2.3.4</span><br><span class="line">          path: /home/kvm/nginx/ftpfile/</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>kubectl apply -f nginx-file-nodeport.yaml</p>
</blockquote>
<h4 id="访问验证："><a href="#访问验证：" class="headerlink" title="访问验证："></a>访问验证：</h4><p>浏览器打开：x.x.x.x:30002/download</p>
]]></content>
      
        <categories>
            
            <category> kubernetes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx使用fancyindex目录索引]]></title>
      <url>/2020/02/26/nginx%E4%BD%BF%E7%94%A8fancyindex%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<p>nginx 的默认目录索引很单调难看，后来有人做了个<code>fancyindex</code>插件，用于美化目录索引。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>重新编译nginx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/aperezdc/ngx-fancyindex/archive/v0.4.3.zip</span><br><span class="line"></span><br><span class="line">unzip v0.4.3.zip</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/nginx --add-module=/xxxx/ngx-fancyindex-master</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    charset utf-8,gbk;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location /  &#123;</span><br><span class="line">            root  /home/wap/; # html网页的静态文件</span><br><span class="line">            index  index.html;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location /download &#123;</span><br><span class="line">            root  /ftpfile;</span><br><span class="line">            autoindex on; # 开启索引功能</span><br><span class="line">            charset utf-8,gbk; # 支持中文</span><br><span class="line">            autoindex_exact_size off;         #关闭详细文件大小统计，让文件大小显示MB，GB单位，默认为b；</span><br><span class="line">            autoindex_localtime on;           #开启以服务器本地时区显示文件修改日期！</span><br><span class="line">            include  /data/Nginx-Fancyindex-Theme/fancyindex.conf</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置静态文件"><a href="#配置静态文件" class="headerlink" title="配置静态文件"></a>配置静态文件</h4><p>在github上面很多大佬写的界面，随便找一个，我用的是<code>https://github.com/alehaa/nginx-fancyindex-flat-theme</code>项目的样式，下载下来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/alehaa/nginx-fancyindex-flat-theme/releases/download/v1.0/nginx-fancyindex-flat-theme.tar.gz</span><br></pre></td></tr></table></figure>
<p>包含以下文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--. 1 501 games  695 2月  20 2018 footer.html</span><br><span class="line">-rw-r--r--. 1 501 games 1.1K 2月  20 2018 header.html</span><br><span class="line">drwxr-xr-x. 2 501 games   43 8月   8 15:13 js/</span><br><span class="line">-rw-r--r--. 1 501 games  854 2月  20 2018 theme.css</span><br></pre></td></tr></table></figure></p>
<p>根据<code>fancyindex.conf</code>和<code>nginx.conf</code>文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Include in location directive</span><br><span class="line">  fancyindex on;</span><br><span class="line">  fancyindex_localtime on; #on for local time zone. off for GMT</span><br><span class="line">  fancyindex_exact_size off; #off for human-readable. on for exact size in bytes</span><br><span class="line">  #fancyindex_header &quot;/fancyindex/header.html&quot;;</span><br><span class="line">  fancyindex_header &quot;/theme/layout/header.html&quot;;</span><br><span class="line">  fancyindex_footer &quot;/theme/layout/footer.html&quot;;</span><br><span class="line">  #fancyindex_footer &quot;/fancyindex/footer.html&quot;;</span><br><span class="line">  fancyindex_ignore &quot;fancyindex&quot;; #ignore this directory when showing list</span><br><span class="line"># end include</span><br></pre></td></tr></table></figure>
<p>把静态文件放到<code>/usr/local/nginx/html</code>目录下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--. 1 root root 537 12月 18 2018 50x.html</span><br><span class="line">drwxr-xr-x. 7 root root 105 1月  31 2019 fancyindex/</span><br><span class="line">-rw-r--r--. 1 root root 612 12月 18 2018 index.html</span><br><span class="line">drwxrwxr-x. 5 root root 147 1月  31 2019 theme/</span><br></pre></td></tr></table></figure>
<p>执行加载命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/bin/nginx -s reload</span><br></pre></td></tr></table></figure></p>
<p>效果图：<br><img src="/images/nginx使用fancyindex目录索引/downloadfile.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django通过redis订阅发布实现实时进度条]]></title>
      <url>/2019/07/21/django%E9%80%9A%E8%BF%87redis%E8%AE%A2%E9%98%85%E5%8F%91%E5%B8%83%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
      <content type="html"><![CDATA[<p>redis有类似消息队列的功能，正好遇到需要实时进度条的功能，需要一个地方存后台任务执行的进度，之前存在mysql里面，然后让html的jQuery代码定时去读取，这个方法并不能做到实时性，且数据延时高，读取压力大。</p>
<h5 id="一、redis订阅发布测试"><a href="#一、redis订阅发布测试" class="headerlink" title="一、redis订阅发布测试"></a>一、redis订阅发布测试</h5><p>版本：</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> python3</li>
<li style="list-style: none"><input type="checkbox" checked> redis4</li>
<li style="list-style: none"><input type="checkbox" checked> django1.11</li>
</ul>
<p><code>RedisProduceData.py</code>发布信息的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import redis,time</span><br><span class="line">from threading import Thread</span><br><span class="line"></span><br><span class="line">class RedisCach(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.host = &apos;127.0.0.1&apos;</span><br><span class="line">        self.port = &apos;6379&apos;</span><br><span class="line">        self.r = redis.StrictRedis(host=self.host, port=self.port,decode_responses=True)</span><br><span class="line">    def insertRedis(self, keyName, jsonStr):</span><br><span class="line">        self.r.publish(keyName, jsonStr) #发布消息</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">发布消息到“legolas”频道</span><br><span class="line">在redis客户端执行&quot;SUBSCRIBE legolas&quot;就可以看到订阅的数据</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">def publisher():</span><br><span class="line">    r = RedisCach()</span><br><span class="line">    a = 1</span><br><span class="line">    while True:</span><br><span class="line">        r.insertRedis(&quot;legolas&quot;,str(a))</span><br><span class="line">        a += 1</span><br><span class="line">        time.sleep(2)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    Thread(target=publisher).start()</span><br></pre></td></tr></table></figure>
<p>这段代码直接将<code>1,2,3...</code>发布到<code>legolas</code>频道，此时在redis客户端执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE legolas           </span><br><span class="line">Reading messages... (press Ctrl-C to quit)  </span><br><span class="line">1) &quot;subscribe&quot;                              </span><br><span class="line">2) &quot;legolas&quot;                                </span><br><span class="line">3) (integer) 1                              </span><br><span class="line">1) &quot;message&quot;                                </span><br><span class="line">2) &quot;legolas&quot;                                </span><br><span class="line">3) &quot;6&quot;                                      </span><br><span class="line">1) &quot;message&quot;                                </span><br><span class="line">2) &quot;legolas&quot;                                </span><br><span class="line">3) &quot;7&quot;                                      </span><br><span class="line">1) &quot;message&quot;                                </span><br><span class="line">2) &quot;legolas&quot;                                </span><br><span class="line">3) &quot;8&quot;                                      </span><br><span class="line">1) &quot;message&quot;                                </span><br><span class="line">2) &quot;legolas&quot;                                </span><br><span class="line">3) &quot;9&quot;       </span><br><span class="line">.....</span><br></pre></td></tr></table></figure>
<p>就可以看到每隔一秒钟打印出数值。通过代码实现订阅<code>RedisSubscribeData.py</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line"></span><br><span class="line">rc = redis.StrictRedis(host=&apos;127.0.0.1&apos;, port=&apos;6379&apos;,decode_responses=True)</span><br><span class="line">ps = rc.pubsub()</span><br><span class="line">ps.subscribe(&apos;legolas&apos;)  # 从legolas频道订阅消息</span><br><span class="line">for item in ps.listen():  # 监听状态：有消息发布了就拿过来</span><br><span class="line">    if item[&apos;type&apos;] == &apos;message&apos;:</span><br><span class="line">        # print(item[&apos;channel&apos;])  # 频道名称</span><br><span class="line">        print(item[&apos;data&apos;])</span><br></pre></td></tr></table></figure>
<h5 id="二、Django结合dwebsocket推送订阅消息"><a href="#二、Django结合dwebsocket推送订阅消息" class="headerlink" title="二、Django结合dwebsocket推送订阅消息"></a>二、Django结合dwebsocket推送订阅消息</h5><p>安装好dwebsocket之后,<code>views.py</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from dwebsocket.decorators import require_websocket,accept_websocket</span><br><span class="line"></span><br><span class="line">@accept_websocket</span><br><span class="line">def websocketredis(request):</span><br><span class="line">    if request.is_websocket():</span><br><span class="line">        for messages in request.websocket:</span><br><span class="line">            message = str(messages, encoding=&apos;utf-8&apos;)</span><br><span class="line">            try:</span><br><span class="line">                if message == &apos;1111&apos;:</span><br><span class="line">                    rc = redis.StrictRedis(host=&apos;127.0.0.1&apos;, port=&apos;6379&apos;, decode_responses=True)</span><br><span class="line">                    ps = rc.pubsub()</span><br><span class="line">                    ps.subscribe(&apos;legolas&apos;)</span><br><span class="line">                    for item in ps.listen():</span><br><span class="line">                        if item[&apos;type&apos;] == &apos;message&apos;:</span><br><span class="line">                            print(item[&apos;data&apos;])</span><br><span class="line">                            request.websocket.send(item[&apos;data&apos;]) # 发送数据到前端</span><br><span class="line">                elif message == &apos;quit&apos;:</span><br><span class="line">                    request.websocket.colse()</span><br><span class="line">            except Exception as e:</span><br><span class="line">                print(e)</span><br></pre></td></tr></table></figure>
<p>在实际生产中，这里可以通过前端传个参数当做订阅的频道。</p>
<p>编写路由，一个是websocket的接口，一个是进度条的前端路由。<br><code>url.py</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^websocketredis&apos;,views.websocketredis,name=&apos;websocketredis&apos;),</span><br><span class="line">url(r&apos;socket_process&apos;, views.socket_process,name=&apos;socket进度条&apos;),</span><br></pre></td></tr></table></figure>
<h5 id="三、前端jQuery代码"><a href="#三、前端jQuery代码" class="headerlink" title="三、前端jQuery代码"></a>三、前端jQuery代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        if(window.s)&#123;</span><br><span class="line">            window.s.close()</span><br><span class="line">        &#125;</span><br><span class="line">        var s = new WebSocket(&quot;ws://127.0.0.1:8080/websocketredis&quot;); //建立websocket</span><br><span class="line">        s.onopen = function () &#123;</span><br><span class="line">            console.log(&apos;WebSocket open&apos;);</span><br><span class="line">            s.send(&apos;1111&apos;)</span><br><span class="line">            console.log(&apos;已经发送code&apos;)</span><br><span class="line">        &#125;;</span><br><span class="line">        s.onmessage = function (msg) &#123;</span><br><span class="line">            console.log(msg.data);</span><br><span class="line">            makeDataOnWeb(msg.data) //处理返回来的数据</span><br><span class="line">            &#123;#var textlength = obje.scrollHeight;#&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        window.s = s;</span><br><span class="line"></span><br><span class="line">        function makeDataOnWeb(data) &#123; // 构建动态进度条</span><br><span class="line">            var a = data; // a就是进度的数值</span><br><span class="line">            var divNode = document.getElementById(&quot;legolas&quot;); //锚定一个id，把进度条渲染出来</span><br><span class="line">            var liNode = document.createElement(&quot;div&quot;);</span><br><span class="line">            divNode.innerHTML=&apos;&apos;;</span><br><span class="line">            liNode.innerHTML = &quot;&lt;small&gt;Completion with: &quot;+a+&quot;%&lt;/small&gt;\n&quot; +</span><br><span class="line">                &quot;                                        &lt;div class=\&quot;progress progress-mini\&quot; id=\&quot;borrow\&quot;&gt;\n&quot; +</span><br><span class="line">                &quot;                                            &lt;div style=\&quot;width: &quot;+a+&quot;%;\&quot; class=\&quot;progress-bar\&quot;&gt;&lt;/div&gt;\n&quot; +</span><br><span class="line">                &quot;                                        &lt;/div&gt;&quot;;</span><br><span class="line"></span><br><span class="line">            divNode.appendChild(liNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        window.onbeforeunload = function () &#123;</span><br><span class="line">            console.log(&quot;1111111111111111&quot;)</span><br><span class="line">            window.s.send(&apos;222222&apos;)</span><br><span class="line">            window.s.close()</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(&apos;#send_message&apos;).click(function () &#123;</span><br><span class="line">        if(!window.s)&#123;</span><br><span class="line">            alert(&quot;Please connect server.&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            window.s.send($(&apos;#message&apos;).val());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&apos;#close_websocket&apos;).click(function () &#123;</span><br><span class="line">        if(window.s)&#123;</span><br><span class="line">            window.s.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h5 id="四、效果如下图："><a href="#四、效果如下图：" class="headerlink" title="四、效果如下图："></a>四、效果如下图：</h5><p><img src="/images/django通过redis订阅发布实现实时进度条/rediswebsocket.gif" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> django </tag>
            
            <tag> websocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows与linux之间同步文件]]></title>
      <url>/2019/06/24/windows%E4%B8%8Elinux%E4%B9%8B%E9%97%B4%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>公司要把金蝶数据库的文件同步备份起来，我马上想到了用<code>rsync</code>同步。<code>rsync</code>虽然是linux平台下的同步工具，也有windows版本的。</p>
<h4 id="下载安装cwRsyncServer"><a href="#下载安装cwRsyncServer" class="headerlink" title="下载安装cwRsyncServer"></a>下载安装cwRsyncServer</h4><p>下载地址：</p>
<ul>
<li style="list-style: none"><input type="checkbox"> <a href="https://www.backupassist.com/rsync/cwRsyncServer_4.1.0_Installer.zip" target="_blank" rel="noopener">https://www.backupassist.com/rsync/cwRsyncServer_4.1.0_Installer.zip</a></li>
</ul>
<p>安装路径：</p>
<ul>
<li style="list-style: none"><input type="checkbox"> C:\Program Files (x86)\ICW</li>
</ul>
<p>配置文件：</p>
<ul>
<li style="list-style: none"><input type="checkbox"> rsyncd.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">use chroot = false</span><br><span class="line">strict modes = false</span><br><span class="line">hosts allow = *</span><br><span class="line">log file = rsyncd.log</span><br><span class="line"></span><br><span class="line"># Module definitions</span><br><span class="line"># Remember cygwin naming conventions : c:\work becomes /cygwin/c/work</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">[data]</span><br><span class="line">path = /cygdrive/g/dingdingfile</span><br><span class="line">read only = no</span><br><span class="line">#list = no</span><br><span class="line">hosts allow = *</span><br><span class="line">uid = 0</span><br><span class="line">gid = 0</span><br><span class="line">auth users = userdata</span><br><span class="line">secrets file = etc/rsyncd.secrets</span><br></pre></td></tr></table></figure>
<ul>
<li><code>path = /cygdrive/g/dingdingfile</code> 表示G盘下的dingdingfile 文件夹</li>
</ul>
<p><img src="/images/windows与linux之间同步文件/windows与linux之间同步文件1.png" alt="image"><br><img src="/images/windows与linux之间同步文件/windows与linux之间同步文件2.png" alt="image"></p>
<ul>
<li>安装的时候会新建一个<code>svc</code>账号，用于认证，你也可以在woi<code>windows</code>的<code>服务</code>里面更改、重启服务。</li>
</ul>
<h4 id="配置服务端"><a href="#配置服务端" class="headerlink" title="配置服务端"></a>配置服务端</h4><p>新建<code>C:\Program Files (x86)\ICW\etc\rsyncd.secrets</code>文件</p>
<p>写入：</p>
<blockquote>
<p>userdata:123456</p>
</blockquote>
<h4 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h4><blockquote>
<p>echo ‘123456’ &gt; /root/rsync_user.pwd</p>
<p>chomd 666 /root/rsync_user.pwd</p>
</blockquote>
<p><img src="/images/windows与linux之间同步文件/windows与linux之间同步文件3.png" alt="image"></p>
<h5 id="开始同步"><a href="#开始同步" class="headerlink" title="开始同步"></a>开始同步</h5><blockquote>
<p>rsync -avz –progress –delete –password-file=/root/rsync_user.pwd userdata@x.x.x.x::data /tmp</p>
</blockquote>
<p><img src="/images/windows与linux之间同步文件/windows与linux之间同步文件4.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zabbix3.4监控ESXI6.7]]></title>
      <url>/2019/03/04/zabbix3-4%E7%9B%91%E6%8E%A7ESXI6-7/</url>
      <content type="html"><![CDATA[<h5 id="1-修改zabbix配置-然后重启zabbix"><a href="#1-修改zabbix配置-然后重启zabbix" class="headerlink" title="1.修改zabbix配置,然后重启zabbix"></a>1.修改zabbix配置,然后重启zabbix</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@Zabbix_server ~]# vim /etc/zabbix/zabbix_server.conf</span><br><span class="line"># 虚拟机ESXI监控配置</span><br><span class="line">StartVMwareCollectors=6  #监控实例数量，取值(0-250)</span><br><span class="line">VMwareCacheSize=50M</span><br><span class="line">VMwareFrequency=10</span><br><span class="line">VMwarePerfFrequency=60  #zabbix获取更新vmware集群结构的最小间隔时间,分钟</span><br><span class="line">VMwareTimeout=300</span><br></pre></td></tr></table></figure>
<p>查看zabbix日志是否有显示成功:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@Zabbix_server ~]# tail -f /var/log/zabbix/zabbix_server.log</span><br><span class="line">   .......</span><br><span class="line">   379:20190225:143354.621 SNMP monitoring:           YES</span><br><span class="line">   379:20190225:143354.621 IPMI monitoring:           YES</span><br><span class="line">   379:20190225:143354.621 Web monitoring:            YES</span><br><span class="line">   379:20190225:143354.621 VMware monitoring:         YES</span><br><span class="line">   379:20190225:143354.621 SMTP authentication:        NO</span><br><span class="line">   379:20190225:143354.621 Jabber notifications:      YES</span><br><span class="line">   379:20190225:143354.621 Ez Texting notifications:  YES</span><br><span class="line">   379:20190225:143354.621 ODBC:                      YES</span><br><span class="line">   379:20190225:143354.621 SSH2 support:              YES</span><br><span class="line">   379:20190225:143354.621 IPv6 support:              YES</span><br><span class="line">   379:20190225:143354.621 TLS support:               YES</span><br><span class="line">   379:20190225:143354.621 ******************************</span><br><span class="line">   379:20190225:143354.621 using configuration file: /etc/zabbix/zabbix_server.conf</span><br><span class="line">   ........</span><br></pre></td></tr></table></figure></p>
<p>出现<code>VMware monitoring</code>值为<code>YES</code>，说明功能添加成功</p>
<h5 id="2-zabbix添加主机"><a href="#2-zabbix添加主机" class="headerlink" title="2.zabbix添加主机"></a>2.zabbix添加主机</h5><p><img src="/images/esxi/zabbix-esxi-1.png" alt="image"></p>
<p>注意:</p>
<blockquote>
<p>1.主机名一定是UUID，不然zabbix监控项那里会报错<code>Unknown hypervisor uuid.</code></p>
<p>2.端口是80</p>
</blockquote>
<p>宏的设定:<br><img src="/images/esxi/zabbix-esxi-3.png" alt="image"></p>
<blockquote>
<p>{$URL} VMware (vCenter or ESX hypervisor) SDK URL (<a href="https://servername/sdk" target="_blank" rel="noopener">https://servername/sdk</a>).</p>
<p>{$USERNAME} ESXI 用户名</p>
<p>{$PASSWORD} ESXI 用户密码</p>
</blockquote>
<h5 id="3-获取UUID"><a href="#3-获取UUID" class="headerlink" title="3.获取UUID"></a>3.获取UUID</h5><p><img src="/images/esxi/zabbix-esxi-5.png" alt="image"></p>
<p>登录web<code>Vclient</code>，把<code>Config</code>Vclient<code>，把</code>Config.HostAgent.plugins.solo.enableMob<code>改成</code>true`，也可以登录客户端修改，不同版本的ESXI，界面有些许不同。</p>
<p>这个服务在esxi6.0以上默认是关闭的。<br>这个时候打开浏览器输入网址<code>https://x.x.x.x/mob/?moid=ha-host&amp;doPath=hardware.systemInfo</code>就可以看到。</p>
<h5 id="4-zabbix画图"><a href="#4-zabbix画图" class="headerlink" title="4.zabbix画图"></a>4.zabbix画图</h5><p><img src="/images/esxi/zabbix-esxi-2.png" alt="image"></p>
<p>打开<code>配置</code>-&gt;<code>模板</code>-&gt;找到vmware的三个模板-&gt;<code>创建图形</code>，再根据自己的需求去画图，貌似只有<code>Template VM VMware Guest</code>和<code>Template VM VMware Hypervisor</code>可以画图，不过已经够用了。</p>
<h5 id="5-grafana可视化ESXI"><a href="#5-grafana可视化ESXI" class="headerlink" title="5.grafana可视化ESXI"></a>5.grafana可视化ESXI</h5><p><img src="/images/esxi/zabbix-esxi-6.png" alt="image"><br>打开grafana的dashboards<a href="https://grafana.com/dashboards" target="_blank" rel="noopener">网址</a>,搜索esxi，选下载数对多的那个。<br><img src="/images/esxi/zabbix-esxi-7.png" alt="image"><br>copy它的ID<code>4812</code>,打开grafana的网址，导入ID<br><img src="/images/esxi/zabbix-esxi-8.png" alt="image"><br>这个时候是没有数据显示的，需要再设置下。<br>进入这个dashboards的<code>settings</code>,设置<code>Variables</code>,Group设置query的时候，由于这个dashboards只是用于esxi，所以regex只匹配esxi的分组，这里你们根据你们的情况做匹配。</p>
<p>参考文档：</p>
<p><a href="https://yq.aliyun.com/articles/669913" target="_blank" rel="noopener">https://yq.aliyun.com/articles/669913</a></p>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> zabbix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[golang爬虫(1)]]></title>
      <url>/2018/10/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB-1/</url>
      <content type="html"><![CDATA[<p>打开豆瓣电影TOP250，打算爬取电影的四个信息，豆瓣排名，图片，评分，电影名。</p>
<p><img src="/images/go爬虫/golang爬取豆瓣电影1.png" alt="image"><br>所以先定义个结构体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type Movie struct &#123;</span><br><span class="line">	Num 	string</span><br><span class="line">	Url  	string</span><br><span class="line">	Star 	string</span><br><span class="line">	Name 	string</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意豆瓣电影的网址，是有规律的：</p>
<p><img src="/images/go爬虫/golang爬取豆瓣电影2.png" alt="image"></p>
<p>每一页<code>start</code>分别为0,25,50…..<br>所以在主函数里面加个循环：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func main()&#123;</span><br><span class="line">	t1 := time.Now()</span><br><span class="line">	for i := 0; i &lt; 11; i++ &#123;</span><br><span class="line">		url := fmt.Sprintf(&quot;https://movie.douban.com/top250?start=%v&amp;filter=&quot;, i*25)</span><br><span class="line">		fmt.Printf(&quot;整在爬取第%v页&quot;,i+1)</span><br><span class="line">		res := getResponse(url)//定义的获取html的函数</span><br><span class="line">		DownloadImg(res)// 下载图片的函数</span><br><span class="line">	&#125;</span><br><span class="line">	elapsed := time.Since(t1)</span><br><span class="line">	fmt.Println(&quot;总共用时: &quot;, elapsed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>爬虫第一步，获取html网页进行解析,安装<code>goquery</code></p>
<blockquote>
<p>gopm -g -v github.com/PuerkitoBio/goquery</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">func getResponse(url string)  []Movie&#123; </span><br><span class="line">	content,err:= goquery.NewDocument(url)</span><br><span class="line">	if err != nil&#123;</span><br><span class="line">		panic(err)</span><br><span class="line">	&#125;</span><br><span class="line">	return ParseResponse(content)//</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func ParseResponse(doc *goquery.Document) (pages []Movie) &#123;</span><br><span class="line">	doc.Find(&quot;div.item&quot;).Each(func(i int, s *goquery.Selection) &#123;</span><br><span class="line">		img,_ :=s.Find(&quot;img&quot;).Attr(&quot;src&quot;)</span><br><span class="line">		num:=s.Find(&quot;em&quot;).Text()</span><br><span class="line">		star:=s.Find(&quot;span.rating_num&quot;).Text()</span><br><span class="line">		name,_:=s.Find(&quot;img&quot;).Attr(&quot;alt&quot;)</span><br><span class="line">		pages = append(pages, Movie&#123;</span><br><span class="line">			Num: num,</span><br><span class="line">			Url:  img,</span><br><span class="line">			Star: star,</span><br><span class="line">			Name: name,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	return pages</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里把<code>ParseResponse</code>函数作为返回值，把处理后的<code>Movie</code>切片返回。处理网页用到<code>goquery</code>的Find匹配网页元素。</p>
<p><img src="/images/go爬虫/golang爬取豆瓣电影3.png" alt="image"></p>
<p>查看网页的元素代码，看到这几个需要获取的信息都在<code>&lt;div class=&quot;item&gt;</code>中，所以先循环获取<code>item</code>:</p>
<blockquote>
<p>doc.Find(“div.item”).Each(func(i int, s *goquery.Selection)</p>
</blockquote>
<p>打印出来大概就是这样的：</p>
<blockquote>
<p>[…..{26 <a href="https://img3.doubanio.com/view/photo/s_ratio_poster/public/p1963126880.jpg" target="_blank" rel="noopener">https://img3.doubanio.com/view/photo/s_ratio_poster/public/p1963126880.jpg</a> 9.2 乱世佳人} {27 <a href="https://img3.doubanio.com/view/photo/s_ratio_poster/public/p462657443.jpg" target="_blank" rel="noopener">https://img3.doubanio.com/view/photo/s_ratio_poster/public/p462657443.jpg</a> 9.1 蝙蝠侠：黑暗骑士}….]</p>
</blockquote>
<p>最后一步下载图片，把图片url和图片名称传给<code>GetImg</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func GetImg(url string , name string) &#123;</span><br><span class="line">	res, _ := http.Get(url)</span><br><span class="line">	file_name := imgpath + &quot;\\&quot; + name + &quot;.jpg&quot; //拼接图片路径</span><br><span class="line">	file, _ := os.Create(file_name)</span><br><span class="line">	io.Copy(file, res.Body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/go爬虫/golang爬取豆瓣电影4.png" alt="image"><br>网速比较慢，测了几次都是10s多一点。</p>
<p><img src="/images/go爬虫/golang爬取豆瓣电影5.png" alt="image"></p>
<p>完整代码<a href="https://github.com/legolas-zeng/GOPATH/blob/master/src/code/%E7%88%AC%E8%99%AB/DoubanImg.go" target="_blank" rel="noopener">点这里</a></p>
<hr>
<p>参考文档：<br><a href="https://www.flysnow.org/2018/01/20/golang-goquery-examples-selector.html" target="_blank" rel="noopener">golang goquery selector(选择器) 示例大全</a><br><a href="https://github.com/go-crawler/douban-movie" target="_blank" rel="noopener">Golang爬虫 爬取豆瓣电影Top250</a></p>
]]></content>
      
        <categories>
            
            <category> go </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> golang </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fiddler抓包和requests请求]]></title>
      <url>/2018/09/21/Fiddler%E6%8A%93%E5%8C%85%E5%92%8Crequests%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h4 id="Fiddler抓包和requests请求"><a href="#Fiddler抓包和requests请求" class="headerlink" title="Fiddler抓包和requests请求"></a>Fiddler抓包和requests请求</h4><p>最近需要爬一个网页，做自动化处理，早先想到用selenium模拟登陆，但是感觉太复杂了。网页登陆大概有两种模式：①账号密码通过表单提交；②构造请求头。</p>
<h5 id="提交账号密码抓包"><a href="#提交账号密码抓包" class="headerlink" title="提交账号密码抓包"></a>提交账号密码抓包</h5><p><img src="/images/Fiddler抓包和requests请求1.png" alt="image"><br>然后打开<code>Fiddler</code>软件，抓包<br><img src="/images/Fiddler抓包和requests请求2.png" alt="image"></p>
<p>在<code>inspeors</code>→<code>Raw</code>可以看到请求头信息，其中<code>Authorization</code>就是提交的账号密码，这里很明显是个密文。我们把<code>YWRjZGU6MTIzNDU2</code>解密下。<br><img src="/images/Fiddler抓包和requests请求3.gif" alt="image"></p>
<h4 id="开始撸代码"><a href="#开始撸代码" class="headerlink" title="开始撸代码"></a>开始撸代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def login_getPage(url,ip):</span><br><span class="line">    # data = &apos;Basic YWRjZGU6MTIzNDU2&apos;</span><br><span class="line">    # 以下是直接把请求头复制进来</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &apos;Host&apos;: ip,</span><br><span class="line">        &apos;Connection&apos;: &apos;keep-alive&apos;,</span><br><span class="line">        &apos;Cache-Control&apos;: &apos;max-age=0&apos;,</span><br><span class="line">        &apos;Authorization&apos;: &apos;Basic YWRjZGU6MTIzNDU2&apos;,</span><br><span class="line">        &apos;Upgrade-Insecure-Requests&apos;: &apos;1&apos;,</span><br><span class="line">        &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&apos;,</span><br><span class="line">        &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&apos;,</span><br><span class="line">        &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;,</span><br><span class="line">        &apos;Accept-Language&apos;: &apos;zh-CN,zh;q=0.9&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        &quot;username&quot;: &quot;abcd&quot;,</span><br><span class="line">        &quot;password&quot;: &quot;123456&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.get(url, data=data, headers=headers)</span><br><span class="line">    if r.status_code == 200: # 判断是否请求成功</span><br><span class="line">        r.encoding = &apos;utf-8&apos;</span><br><span class="line">        response = r.text</span><br><span class="line">        return response</span><br><span class="line">    else:</span><br><span class="line">        print r.status_code</span><br><span class="line">        return 1</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 运维 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[apache路径大小写敏感]]></title>
      <url>/2018/08/29/apache%E8%B7%AF%E5%BE%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F/</url>
      <content type="html"><![CDATA[<p>今天部署了一个静态网页index.html，用的Apache，不为啥，就因为静态网站的文件中有中文路径，nginx对中文支持不是很好。所以改用Apache</p>
<h4 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h4><blockquote>
<p>yum install httpd -y</p>
</blockquote>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><blockquote>
<p>vim /etc/httpd/conf/httpd.conf</p>
<p><code>LoadModule speling_module     modules/mod_speling.so</code></p>
<p>在<code>Directory</code>中加入<code>CheckSpelling On</code></p>
</blockquote>
<p><code>mod_speling.so</code>模块在<code>/etc/httpd/modules</code>目录下，如果有报错的话，现在看下这个模块在不在。</p>
<h3 id="设置路径"><a href="#设置路径" class="headerlink" title="设置路径"></a>设置路径</h3><p>就用httpd的默认路径吧<code>DocumentRoot &quot;/var/www/html&quot;</code>，把静态文件全部放到html目录下。<br>重启Apache…..</p>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jenkins+tomcat+svn自动发布maven项目]]></title>
      <url>/2018/03/30/jenkins-tomcat-svn%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83maven%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h4 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h4><ul>
<li style="list-style: none"><input type="checkbox" checked> jenkins 2.11</li>
<li style="list-style: none"><input type="checkbox" checked> centos 7</li>
<li style="list-style: none"><input type="checkbox" checked> tomcat 7</li>
<li style="list-style: none"><input type="checkbox" checked> jenkins服务器ip 192.168.28.130</li>
<li style="list-style: none"><input type="checkbox" checked> 远程发布服务器 172.19.0.2</li>
</ul>
<h4 id="jenkis配置"><a href="#jenkis配置" class="headerlink" title="jenkis配置"></a>jenkis配置</h4><p>jenkins的下载安装就不写了，网上太多教程。安装完记得在安装一些必要的插件。</p>
<h5 id="ssh设置"><a href="#ssh设置" class="headerlink" title="ssh设置"></a>ssh设置</h5><p>在<code>系统管理</code>-》<code>系统设置</code>里面找到<code>SSH Servers</code>配置栏。</p>
<p><img src="/images/jenkins-1.png" alt="image"></p>
<p><code>Remote Directory</code>:远程ssh服务器的根目录，这里我发布版本就设置为<code>/data/version</code></p>
<p>然后小手点一下旁边的<code>Test Configuration</code>,一般测试没问题。</p>
<p> ok，保存，应用。</p>
<h5 id="任务构建"><a href="#任务构建" class="headerlink" title="任务构建"></a>任务构建</h5><p> 返回到主界面，点击<code>新建任务</code>，<code>构建一个maven项目</code>。</p>
<p> <img src="/images/jenkins-2.png" alt="image"></p>
<p> 然后是源码管理，这里公司用的svn，你也可以用git。</p>
<p> <img src="/images/jenkins-3.png" alt="image"></p>
<p> <img src="/images/jenkins-4.png" alt="image"></p>
<p> 注意这个<code>pom.xml</code>文件是maven项目自带的文件，有时候会出现找不到该文件的错误，你就写成相对路径。</p>
<p> 然后打包命令：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean package</span><br></pre></td></tr></table></figure></p>
<p> 打包之后的包在maven的文件夹里，可以在控制台输出中看到。</p>
<p> 最后配置ssh传输打出来的包。注意这里的<code>removeprefix</code>是指刚在系统设置里面设置的远程ssh服务器根目录里面的子目录。<code>exec command</code>填入我要执行的脚本。</p>
<p> <img src="/images/jenkins-5.png" alt="image"></p>
<p> 保存应用，点立即构建….<br> <img src="/images/jenkins-6.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 自动化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rsync配置（备忘）]]></title>
      <url>/2018/03/25/rsync%E9%85%8D%E7%BD%AE%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><code>rsync</code>用于服务器间同步文件，常用于实时同步。先看看这个词怎么读吧，我就听过好几种读音的，标准<code>发音：（锐森）</code></p>
<h5 id="实验用服务器"><a href="#实验用服务器" class="headerlink" title="实验用服务器"></a>实验用服务器</h5><ul>
<li style="list-style: none"><input type="checkbox" checked> 源主机 192.168.28.130</li>
<li style="list-style: none"><input type="checkbox" checked> 目标主机 172.19.0.2</li>
</ul>
<p>目标主机要从源主机上同步文件。</p>
<h5 id="rsync安装和命令"><a href="#rsync安装和命令" class="headerlink" title="rsync安装和命令"></a>rsync安装和命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y rsync</span><br></pre></td></tr></table></figure>
<p>启动命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync --daemon</span><br></pre></td></tr></table></figure></p>
<h5 id="源主机配置"><a href="#源主机配置" class="headerlink" title="源主机配置"></a>源主机配置</h5><p>配置文件有3个：</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> rsyncd.conf</li>
<li style="list-style: none"><input type="checkbox" checked> rsyncd.secrets</li>
<li style="list-style: none"><input type="checkbox" checked> rsync_manager_passwd.txt</li>
</ul>
<p><code>rsync_manager_passwd.txt</code>是密码文件，<code>rsyncd.conf</code>是配置文件，<code>rsyncd.secrets</code>是密码文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/etc ᐅ vim rsyncd.conf</span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line">use chroot = yes</span><br><span class="line">max connections = 100</span><br><span class="line">syslog facility = local5</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">incoming chmod = Du=rwx,Dog=rx,Fu=rwx,Fgo=rx</span><br><span class="line"></span><br><span class="line">[manager]</span><br><span class="line">path = /data/version/</span><br><span class="line">ignore errors</span><br><span class="line">read only = true</span><br><span class="line">hosts allow = *</span><br><span class="line">auth users = zeng</span><br><span class="line">secrets file = /etc/rsyncd.secrets</span><br></pre></td></tr></table></figure>
<p>编辑<code>rsyncd.secrets</code>，里面存了用户名和密码，注意格式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc ᐅ vim rsyncd.secrets</span><br><span class="line">zeng:rsync</span><br></pre></td></tr></table></figure></p>
<p>配置完千万记得修改文件权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/data ᐅ chmod 600 /etc/rsyncd.conf             </span><br><span class="line">/data ᐅ chmod 600 /etc/rsyncd.secrets</span><br></pre></td></tr></table></figure></p>
<p>然后启动<code>rsync</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync --daemon</span><br></pre></td></tr></table></figure></p>
<h5 id="目标主机配置"><a href="#目标主机配置" class="headerlink" title="目标主机配置"></a>目标主机配置</h5><p>配置<code>rsync_manager_passwd.txt</code>就ok了。把密码<code>rsync</code>写进去。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@754107d2a7f4 etc]# vim rsync_manager_passwd.txt</span><br><span class="line">rsync</span><br><span class="line">[root@754107d2a7f4 etc]# chmod 600 /etc/rsync_manager_passwd.txt</span><br></pre></td></tr></table></figure>
<p>然后就可以同步了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@754107d2a7f4 data]# rsync -avz --delete --password-file=/etc/rsync_manager_passwd.txt --port=873 zeng@192.168.28.130::manager/datas/ /data/version/datas</span><br><span class="line">receiving incremental file list</span><br><span class="line">./</span><br><span class="line">version.txt</span><br><span class="line"></span><br><span class="line">sent 79 bytes  received 172 bytes  502.00 bytes/sec</span><br><span class="line">total size is 15  speedup is 0.06</span><br></pre></td></tr></table></figure></p>
<p>写完睡觉！！！</p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rsync </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[itchat+tornado微信报警]]></title>
      <url>/2018/03/13/itchat-tornado%E5%BE%AE%E4%BF%A1%E6%8A%A5%E8%AD%A6/</url>
      <content type="html"><![CDATA[<p>公司现在用着zabbix+tornado+微信企业号实现实时报警功能，但是我嫌麻烦，不想多安装个微信企业号。于是就想通过itchat来转发报警信息。<br>大概结构如下图：</p>
<p><img src="/images/itchat+tornado微信报警.png" alt="image"></p>
<h4 id="版本工具"><a href="#版本工具" class="headerlink" title="版本工具"></a>版本工具</h4><ul>
<li style="list-style: none"><input type="checkbox" checked> tornado</li>
<li style="list-style: none"><input type="checkbox" checked> itchat</li>
<li style="list-style: none"><input type="checkbox" checked> python2.7</li>
</ul>
<h4 id="itchat"><a href="#itchat" class="headerlink" title="itchat"></a>itchat</h4><p>看看<a href="https://itchat.readthedocs.io/zh/latest/" target="_blank" rel="noopener">官网介绍</a>,完成发送告警信息功能的话，需要：</p>
<blockquote>
<p>查找到指定的微信用户</p>
<p>查找到指定的微信群组</p>
<p>send 信息</p>
</blockquote>
<p>所以，微信脚本可以这样写：</p>
<h5 id="查找微信用户"><a href="#查找微信用户" class="headerlink" title="查找微信用户"></a>查找微信用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_UserName(NickName):</span><br><span class="line">    info = itchat.search_friends(nickName=NickName)</span><br><span class="line">    fname = info[0][&apos;UserName&apos;]</span><br><span class="line">    return fname</span><br></pre></td></tr></table></figure>
<p>只需要传<code>微信昵称</code>即可以查找到指定用户。</p>
<h5 id="查找微信群组"><a href="#查找微信群组" class="headerlink" title="查找微信群组"></a>查找微信群组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_Group(groupname):</span><br><span class="line">    group = itchat.search_chatrooms(name=groupname)</span><br><span class="line">    if group is not None:</span><br><span class="line">        group_name = group[0][&apos;UserName&apos;]</span><br><span class="line">        return group_name</span><br></pre></td></tr></table></figure>
<p>同样只需要传入微信群组的群名即可。</p>
<h5 id="发送信息"><a href="#发送信息" class="headerlink" title="发送信息"></a>发送信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def send_msg(fname,msg):</span><br><span class="line">    b = itchat.send(msg, toUserName=fname)</span><br><span class="line">    req = b.get(&apos;BaseResponse&apos;).get(&apos;Ret&apos;)</span><br><span class="line">    if req == 0 :</span><br><span class="line">        print u&apos;消息发送成功&apos;</span><br></pre></td></tr></table></figure>
<p>传入两个参数，一个是发送对象<code>fname</code>，可以是用户也可以是群组。另一个参数是<code>msg</code>需要发送的报警信息。</p>
<p>完整代码点<a href="https://github.com/legolas-zeng/scripts/blob/master/tornado/two.py" target="_blank" rel="noopener">这里</a>,顺手点个star吧≖‿≖✧</p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> tornado </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单机版的tornado+nginx反向代理]]></title>
      <url>/2018/03/08/%E5%8D%95%E6%9C%BA%E7%89%88%E7%9A%84tornado-nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>国际惯例，先上一个tornado最简单的<code>hello，world</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># -*-coding:utf-8 -*-</span><br><span class="line">import tornado</span><br><span class="line">from tornado import ioloop # 核心的I/O循环</span><br><span class="line">from tornado import web # web框架的大部分主要功能，包含RequestHandler和Application两个重要的类</span><br><span class="line">from tornado.options import define, options</span><br><span class="line">define(&quot;port&quot;, default=8000, type=int)</span><br><span class="line"></span><br><span class="line">class IndexHandler(web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&apos;hello ,world&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(handlers=[(r&quot;/&quot;, IndexHandler)])</span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure>
<p>浏览器输入<code>ip：8000</code>就可以看到，说明tornado运行正常。</p>
<p><img src="/images/单机版的tornado-nginx反向代理1.png" alt="image"></p>
<p>如果我想有<code>http://zengabcdo.com/</code>访问<code>tornado</code>,就要用到反向代理。<br>现在<code>hosts</code>文件添加解析记录（win端修改<code>C:\Windows\System32\drivers\etc</code>的hosts），添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.28.130 zengabcdo.com</span><br></pre></td></tr></table></figure></p>
<p>在nginx.conf上添加server模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80; # nginx监听端口</span><br><span class="line">        server_name  zengabcdo.com; # 虚拟主机名</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://192.168.28.130:8000; # 代理转发的地址</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>然后重新载入配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></p>
<p>浏览器输入：<a href="http://zengabcdo.com/" target="_blank" rel="noopener">http://zengabcdo.com/</a></p>
<p><img src="/images/单机版的tornado-nginx反向代理2.png" alt="image"></p>
<p>熟悉的hello，world……</p>
]]></content>
      
        <categories>
            
            <category> web后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ansible </tag>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker防坑指南（一）]]></title>
      <url>/2018/03/08/docker%E9%98%B2%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>刚开始用docker的时候就发现centos7容器没办法使用<code>systemctl</code>,<code>service</code>命令提示错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@slave2 ~]# systemctl stop firewalld.service</span><br><span class="line">Failed to get D-Bus connection: Operation not permitted</span><br></pre></td></tr></table></figure></p>
<p>对于这个bug，网上很多人说<code>centos7.2</code>之后会得到处理，实际上我现在使用的<code>centos7.3</code>,问题依旧存在，放几个啪啪打脸的有毒连接：</p>
<p>1、<a href="https://seven.centos.org/2015/12/fixing-centos-7-systemd-conflicts-with-docker/" target="_blank" rel="noopener">Fixing CentOS 7 systemd conflicts with docker</a></p>
<p>2、<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1033604" target="_blank" rel="noopener">Unable to start systemd service in Docker container</a></p>
<hr>
<p>这个BUG报错信息大概意思是<code>未能获得D-Bus连接，不能进行操作</code>，centos7作为全新的系统，摒弃centos6，直接采用<code>systemd</code>作为系统启动和服务器守护进程管理器，新特性之一就是采用socket式与D-Bus总线式激活服务,用非常行外的话说，就是centos7启动服务，需要与内核通讯，且需要D-Bus连接的权限。</p>
<hr>
<p>我写这文档的时候只知道两种解决方法：</p>
<h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>需要用到<code>docker</code>的特权模式，centos容器作为一个文件系统，只有获取<code>--privileged</code>才能访问linux内核。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ docker run -itd --privileged ansible/centos7-ansible init</span><br><span class="line">a73599408f1a7ba6ff7cd2a73a4f613f7fd3393c021cbdc82c07c9b21134cbb5</span><br><span class="line">~ ᐅ docker exec -it a73599408f1a /bin/bash</span><br><span class="line">[root@a73599408f1a ansible]# systemctl stop firewalld.service</span><br><span class="line">Failed to stop firewalld.service: Unit firewalld.service not loaded.</span><br></pre></td></tr></table></figure>
<p>ok，这样就没报错了。</p>
<p>当然也可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ docker run -d --privileged=true ansible/centos7-ansible /usr/sbin/init </span><br><span class="line">975b6451e07d3edfccc0201e5b35f350cd0bc5321dfaf1e15432bc48bd8b591d</span><br><span class="line">~ ᐅ docker exec -it 975b6451e07d /bin/bash</span><br><span class="line">[root@975b6451e07d ansible]# systemctl stop firewalld.service</span><br><span class="line">Failed to stop firewalld.service: Unit firewalld.service not loaded.</span><br></pre></td></tr></table></figure></p>
<p>我一直用的docker-compose，所以，docker-compose.yml文件可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version : &apos;2&apos;</span><br><span class="line">services :</span><br><span class="line">  centos7 :</span><br><span class="line">    image: 你的镜像</span><br><span class="line">    container_name : xxxx</span><br><span class="line">    privileged : true</span><br><span class="line">    command : init</span><br><span class="line">    .....balabala.....</span><br></pre></td></tr></table></figure></p>
<p>主要就是加了<code>privileged</code>特权和执行<code>command</code>。</p>
<p>当然喜欢用<code>dockerfile</code>的可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">ENV container docker</span><br><span class="line">RUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == \</span><br><span class="line">systemd-tmpfiles-setup.service ] || rm -f $i; done); \</span><br><span class="line">rm -f /lib/systemd/system/multi-user.target.wants/*;\</span><br><span class="line">rm -f /etc/systemd/system/*.wants/*;\</span><br><span class="line">rm -f /lib/systemd/system/local-fs.target.wants/*; \</span><br><span class="line">rm -f /lib/systemd/system/sockets.target.wants/*udev*; \</span><br><span class="line">rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \</span><br><span class="line">rm -f /lib/systemd/system/basic.target.wants/*;\</span><br><span class="line">rm -f /lib/systemd/system/anaconda.target.wants/*;</span><br><span class="line">VOLUME [ &quot;/sys/fs/cgroup&quot; ]</span><br><span class="line">CMD [&quot;/usr/sbin/init&quot;]</span><br></pre></td></tr></table></figure></p>
<p>这是github上的一个<a href="https://github.com/docker-library/docs/blob/master/centos/README.md" target="_blank" rel="noopener">官方例子</a>。</p>
<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>有时间再写….</p>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/" target="_blank" rel="noopener">https://developers.redhat.com/blog/2014/05/05/running-systemd-within-docker-container/</a></p>
<p><code>深入浅析centos7中的systemd</code>:  <a href="https://www.zhangshengrong.com/p/JKN8EgomX6/" target="_blank" rel="noopener">https://www.zhangshengrong.com/p/JKN8EgomX6/</a></p>
<p><code>centOS7服务管理与启动流程</code>：<a href="https://www.cnblogs.com/duzhaoqi/p/7582404.html" target="_blank" rel="noopener">https://www.cnblogs.com/duzhaoqi/p/7582404.html</a></p>
<p><code>D-Bus介绍</code>: <a href="http://blog.csdn.net/qq_29729577/article/details/51143260" target="_blank" rel="noopener">http://blog.csdn.net/qq_29729577/article/details/51143260</a></p>
<p><code>CentOS image documentation</code>:<a href="https://github.com/docker-library/docs/blob/master/centos/README.md" target="_blank" rel="noopener">https://github.com/docker-library/docs/blob/master/centos/README.md</a></p>
<p><code>D-Bus</code>:一种本地进程间通信机制</p>
]]></content>
      
        <categories>
            
            <category> 容器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ansible的api大坑解析]]></title>
      <url>/2018/02/27/ansible%E7%9A%84api%E5%A4%A7%E5%9D%91%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="工具版本"><a href="#工具版本" class="headerlink" title="工具版本"></a>工具版本</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> centos7</li>
<li style="list-style: none"><input type="checkbox" checked> ansible2.4</li>
<li style="list-style: none"><input type="checkbox" checked> ansible2.3</li>
<li style="list-style: none"><input type="checkbox" checked> python2.7</li>
</ul>
<p>先上一个官方原生api，<a href="http://docs.ansible.com/ansible/latest/dev_guide/developing_api.html" target="_blank" rel="noopener">点这里</a>查看官网。</p>
<p>写这文档的时候官方api版本是<code>ansible 2.4.2.0</code>，版本改动略大，导致很多以前的代码不能用。</p>
<h3 id="一些改动过的方法"><a href="#一些改动过的方法" class="headerlink" title="一些改动过的方法"></a>一些改动过的方法</h3><h5 id="Inventory-类"><a href="#Inventory-类" class="headerlink" title="Inventory 类"></a>Inventory 类</h5><p><code>Inventory 类</code>是用于解析和聚合host,group，<code>ansible 2.3</code>之前的import方法是：</p>
<blockquote>
<p>from ansible.inventory import Inventory</p>
</blockquote>
<p><code>ansible 2.4</code>导入Inventory：</p>
<blockquote>
<p>from ansible.inventory.manager import InventoryManager</p>
</blockquote>
<p>且用法也不同，查看源码，愣是没发现为什么不同，此坑日后再填。</p>
<h5 id="VariableManager类"><a href="#VariableManager类" class="headerlink" title="VariableManager类"></a>VariableManager类</h5><p><code>VariableManager</code>用于接收<code>Inventory</code>库存。</p>
<p><code>ansible 2.3</code>导入：</p>
<blockquote>
<p>from ansible.vars import VariableManager</p>
</blockquote>
<p><code>ansible 2.4</code>导入：</p>
<blockquote>
<p>from ansible.vars.manager import VariableManager</p>
</blockquote>
<h3 id="ansible-2-3的一个api例子"><a href="#ansible-2-3的一个api例子" class="headerlink" title="ansible 2.3的一个api例子"></a>ansible 2.3的一个api例子</h3><p>编写<code>ansible_api.py</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">def exec_ansible(module,args,host):</span><br><span class="line">    import json</span><br><span class="line">    from collections import namedtuple</span><br><span class="line">    from ansible.parsing.dataloader import DataLoader</span><br><span class="line">    from ansible.vars import VariableManager</span><br><span class="line">    from ansible.inventory import Inventory</span><br><span class="line">    from ansible.playbook.play import Play</span><br><span class="line">    from ansible.executor.task_queue_manager import TaskQueueManager</span><br><span class="line">    from ansible.plugins.callback import CallbackBase</span><br><span class="line"></span><br><span class="line">    class ResultCallback(CallbackBase):</span><br><span class="line">        def v2_runner_on_ok(self, result, **kwargs):</span><br><span class="line">            host = result._host</span><br><span class="line">            self.data = json.dumps(&#123;host.name: result._result&#125;, indent=4)</span><br><span class="line"></span><br><span class="line">    Options = namedtuple(&apos;Options&apos;, [&apos;connection&apos;, &apos;module_path&apos;, &apos;forks&apos;, &apos;become&apos;, &apos;become_method&apos;, &apos;become_user&apos;, &apos;check&apos;])</span><br><span class="line">    variable_manager = VariableManager()</span><br><span class="line">    loader = DataLoader()</span><br><span class="line">    options = Options(connection=&apos;smart&apos;, module_path=&apos;/usr/lib/python2.7/site-packages/ansible/modules/&apos;, forks=100, become=None, become_method=None, become_user=&apos;root&apos;, check=False)</span><br><span class="line">    passwords = dict(vault_pass=&apos;secret&apos;)</span><br><span class="line">    results_callback = ResultCallback()</span><br><span class="line">    inventory = Inventory(loader=loader, variable_manager=variable_manager, host_list=&apos;/etc/ansible/hosts&apos;)</span><br><span class="line">    variable_manager.set_inventory(inventory)</span><br><span class="line"></span><br><span class="line">    play_source =  dict(</span><br><span class="line">            name = &quot;Ansible Play&quot;,</span><br><span class="line">            hosts = host,</span><br><span class="line">            gather_facts = &apos;no&apos;,</span><br><span class="line">            tasks = [</span><br><span class="line">                dict(action=dict(module=module, args=args), register=&apos;shell_out&apos;),</span><br><span class="line">             ]</span><br><span class="line">        )</span><br><span class="line">    play = Play().load(play_source, variable_manager=variable_manager, loader=loader)</span><br><span class="line"></span><br><span class="line">    tqm = None</span><br><span class="line">    try:</span><br><span class="line">        tqm = TaskQueueManager(</span><br><span class="line">                  inventory=inventory,</span><br><span class="line">                  variable_manager=variable_manager,</span><br><span class="line">                  loader=loader,</span><br><span class="line">                  options=options,</span><br><span class="line">                  passwords=passwords,</span><br><span class="line">                  stdout_callback=results_callback,</span><br><span class="line">              )</span><br><span class="line">        result = tqm.run(play)</span><br><span class="line">    finally:</span><br><span class="line">        if tqm is not None:</span><br><span class="line">            tqm.cleanup</span><br><span class="line">        return json.loads(results_callback.data)</span><br></pre></td></tr></table></figure></p>
<p>在同目录下引用此<code>api</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info = exec_ansible(module=&apos;setup&apos;,args=&apos;&apos;,host=&apos;172.17.0.3&apos;)</span><br></pre></td></tr></table></figure></p>
<p>可以获取<code>172.17.0.3</code>机器的详细信息，经常用于运维管理系统开发。配合django，把info装好：</p>
<p>编辑<code>test.py</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from ansible_api import exec_ansible</span><br><span class="line">import json,requests</span><br><span class="line"></span><br><span class="line">def get_info():</span><br><span class="line">	info = exec_ansible(module=&apos;setup&apos;,args=&apos;&apos;,host=&apos;172.17.0.3&apos;)</span><br><span class="line">	print type(info)</span><br><span class="line">	data = json.dumps(info)</span><br><span class="line">	url = &quot;http://192.168.2.120/api_host_info&quot;</span><br><span class="line">	r = requests.post(url, data=data)</span><br><span class="line">	print r.status_code</span><br><span class="line">	</span><br><span class="line">get_info()</span><br></pre></td></tr></table></figure></p>
<p>django后台功能：<br>其中<code>data</code>数据是通过view.py获取到<code>test.py</code>传送过来的数据，调用<code>ansible_handle</code>处理，剩余的就很简单了。略…..<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#TODO ansible数据处理</span><br><span class="line">def ansible_handle(data):</span><br><span class="line">	req = data</span><br><span class="line">	data_list = &#123;&#125;</span><br><span class="line">	for k, v in req.items():</span><br><span class="line">		info_list = v.get(&apos;ansible_facts&apos;)</span><br><span class="line">		network_info = info_list.get(&apos;ansible_eth0&apos;)</span><br><span class="line">		disk_info = info_list.get(&apos;ansible_mounts&apos;)</span><br><span class="line">		men_info = info_list.get(&apos;ansible_memory_mb&apos;)</span><br><span class="line">		HDD_info = info_list.get(&apos;ansible_devices&apos;)</span><br><span class="line">		</span><br><span class="line">		print disk_info</span><br><span class="line">		</span><br><span class="line">		network = network_info.get(&apos;ipv4&apos;)</span><br><span class="line">		data_list[&apos;netmask&apos;] = network.get(&apos;netmask&apos;)</span><br><span class="line">		data_list[&apos;network&apos;] = network.get(&apos;network&apos;)</span><br><span class="line">		</span><br><span class="line">		data_list[&apos;ipv4&apos;] = info_list.get(&apos;ansible_all_ipv4_addresses&apos;)     # ipv4</span><br><span class="line">		data_list[&apos;system_version&apos;] = info_list.get(&apos;ansible_distribution_version&apos;)  # 系统版本</span><br><span class="line">		data_list[&apos;hostname&apos;] = info_list.get(&apos;ansible_hostname&apos;)           # 主机名</span><br><span class="line">		data_list[&apos;system&apos;] = info_list.get(&apos;ansible_distribution&apos;)         # 系统发行版</span><br><span class="line">		data_list[&apos;men&apos;] = info_list.get(&apos;ansible_memtotal_mb&apos;)             # 物理内存容量</span><br><span class="line">		data_list[&apos;cpu&apos;] = info_list.get(&apos;ansible_processor&apos;)               # cpu</span><br><span class="line">		data_list[&apos;kernel&apos;] = info_list.get(&apos;ansible_kernel&apos;)               # 内核</span><br><span class="line">		data_list[&apos;cpu_total&apos;] = info_list.get(&apos;ansible_processor_vcpus&apos;)   # CPU核心数</span><br></pre></td></tr></table></figure></p>
<p>参考文档：</p>
<p><code>ansible2.0 playbook api运维应用</code><a href="https://segmentfault.com/a/1190000008009639" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008009639</a></p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[远程控制supervisor]]></title>
      <url>/2018/02/27/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6supervisor/</url>
      <content type="html"><![CDATA[<p><code>supervisor</code>启动后，自动开放<code>RPC</code>功能，可通过<code>XML-RPC API</code>调用管理进程。官方文档请移步<a href="http://supervisord.org/api.html" target="_blank" rel="noopener">这里</a>。</p>
<h3 id="连接supervisor"><a href="#连接supervisor" class="headerlink" title="连接supervisor"></a>连接supervisor</h3><p>使用Python的xmlrpclib客户端库进行此操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import xmlrpclib</span><br><span class="line"></span><br><span class="line">server = xmlrpclib.Server(&apos;http://用户名:密码@supervisor的ip:端口/RPC2&apos;)</span><br></pre></td></tr></table></figure></p>
<p>例如这样的：</p>
<blockquote>
<p>server = xmlrpclib.Server(‘<a href="http://user:123@192.168.28.130:9001/RPC2" target="_blank" rel="noopener">http://user:123@192.168.28.130:9001/RPC2</a>‘)</p>
</blockquote>
<h3 id="supervisor的API方法"><a href="#supervisor的API方法" class="headerlink" title="supervisor的API方法"></a>supervisor的API方法</h3><p>方法好的，可以通过<code>system.listMethods()</code>查看有哪些可以用的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">In [11]: server.system.listMethods()</span><br><span class="line">Out[11]:</span><br><span class="line">[&apos;supervisor.addProcessGroup&apos;,</span><br><span class="line"> &apos;supervisor.clearAllProcessLogs&apos;,</span><br><span class="line"> &apos;supervisor.clearLog&apos;,</span><br><span class="line"> &apos;supervisor.clearProcessLog&apos;,</span><br><span class="line"> &apos;supervisor.clearProcessLogs&apos;,</span><br><span class="line"> &apos;supervisor.getAPIVersion&apos;,</span><br><span class="line"> &apos;supervisor.getAllConfigInfo&apos;,</span><br><span class="line"> &apos;supervisor.getAllProcessInfo&apos;,</span><br><span class="line"> &apos;supervisor.getIdentification&apos;,</span><br><span class="line"> &apos;supervisor.getPID&apos;,</span><br><span class="line"> &apos;supervisor.getProcessInfo&apos;,</span><br><span class="line"> &apos;supervisor.getState&apos;,</span><br><span class="line"> &apos;supervisor.getSupervisorVersion&apos;,</span><br><span class="line"> &apos;supervisor.getVersion&apos;,</span><br><span class="line"> &apos;supervisor.readLog&apos;,</span><br><span class="line"> &apos;supervisor.readMainLog&apos;,</span><br><span class="line"> &apos;supervisor.readProcessLog&apos;,</span><br><span class="line"> &apos;supervisor.readProcessStderrLog&apos;,</span><br><span class="line"> &apos;supervisor.readProcessStdoutLog&apos;,</span><br><span class="line"> &apos;supervisor.reloadConfig&apos;,</span><br><span class="line"> &apos;supervisor.removeProcessGroup&apos;,</span><br><span class="line"> &apos;supervisor.restart&apos;,</span><br><span class="line"> &apos;supervisor.sendProcessStdin&apos;,</span><br><span class="line"> &apos;supervisor.sendRemoteCommEvent&apos;,</span><br><span class="line"> &apos;supervisor.shutdown&apos;,</span><br><span class="line"> &apos;supervisor.signalAllProcesses&apos;,</span><br><span class="line"> &apos;supervisor.signalProcess&apos;,</span><br><span class="line"> &apos;supervisor.signalProcessGroup&apos;,</span><br><span class="line"> &apos;supervisor.startAllProcesses&apos;,</span><br><span class="line"> &apos;supervisor.startProcess&apos;,</span><br><span class="line"> &apos;supervisor.startProcessGroup&apos;,</span><br><span class="line"> &apos;supervisor.stopAllProcesses&apos;,</span><br><span class="line"> &apos;supervisor.stopProcess&apos;,</span><br><span class="line"> &apos;supervisor.stopProcessGroup&apos;,</span><br><span class="line"> &apos;supervisor.tailProcessLog&apos;,</span><br><span class="line"> &apos;supervisor.tailProcessStderrLog&apos;,</span><br><span class="line"> &apos;supervisor.tailProcessStdoutLog&apos;,</span><br><span class="line"> &apos;system.listMethods&apos;,</span><br><span class="line"> &apos;system.methodHelp&apos;,</span><br><span class="line"> &apos;system.methodSignature&apos;,</span><br><span class="line"> &apos;system.multicall&apos;]</span><br></pre></td></tr></table></figure></p>
<p>这些方法都非常好理解，挑几个常用的：</p>
<h5 id="启动进程"><a href="#启动进程" class="headerlink" title="启动进程"></a>启动进程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [9]: server.supervisor.startProcess(&apos;nginx&apos;)</span><br><span class="line">Out[9]: True</span><br></pre></td></tr></table></figure>
<p>里面进程名是<code>supervisord.conf</code>的<code>program</code>名，成功返回True。</p>
<h5 id="停止进程"><a href="#停止进程" class="headerlink" title="停止进程"></a>停止进程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [10]: server.supervisor.stopProcess(&apos;nginx&apos;)</span><br><span class="line">Out[10]: True</span><br></pre></td></tr></table></figure>
<h5 id="获取进程信息"><a href="#获取进程信息" class="headerlink" title="获取进程信息"></a>获取进程信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [16]: server.supervisor.getProcessInfo(&apos;nginx&apos;)</span><br><span class="line">Out[16]:</span><br><span class="line">&#123;&apos;description&apos;: &apos;Feb 27 05:02 PM&apos;,</span><br><span class="line"> &apos;exitstatus&apos;: -1,</span><br><span class="line"> &apos;group&apos;: &apos;nginx&apos;,</span><br><span class="line"> &apos;logfile&apos;: &apos;/tmp/nginx-stdout---supervisor-6LMS7i.log&apos;,</span><br><span class="line"> &apos;name&apos;: &apos;nginx&apos;,</span><br><span class="line"> &apos;now&apos;: 1519723492,</span><br><span class="line"> &apos;pid&apos;: 0,</span><br><span class="line"> &apos;spawnerr&apos;: &apos;&apos;,</span><br><span class="line"> &apos;start&apos;: 1519722170,</span><br><span class="line"> &apos;state&apos;: 0,</span><br><span class="line"> &apos;statename&apos;: &apos;STOPPED&apos;,</span><br><span class="line"> &apos;stderr_logfile&apos;: &apos;/tmp/nginx-stderr---supervisor-FICVoc.log&apos;,</span><br><span class="line"> &apos;stdout_logfile&apos;: &apos;/tmp/nginx-stdout---supervisor-6LMS7i.log&apos;,</span><br><span class="line"> &apos;stop&apos;: 1519722172&#125;</span><br></pre></td></tr></table></figure>
<p><code>&#39;state&#39;: 0</code>说明已经停止进程了。</p>
<h3 id="整合django"><a href="#整合django" class="headerlink" title="整合django"></a>整合django</h3><p>此坑日后再填</p>
<p>参考文档：</p>
<p><code>官网文档</code>：<a href="http://supervisord.org/api.html" target="_blank" rel="noopener">http://supervisord.org/api.html</a></p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> supervisor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[supervisor进程管理]]></title>
      <url>/2018/02/10/supervisor%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>supervisor是python写的linux进程管理工具，安装使用简单</p>
<h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>本次配置使用的工具如下：</p>
<blockquote>
<p>centos7</p>
<p>python2.7(系统自带)</p>
<p>mysql5.7</p>
<p>redis4</p>
<p>supervisor</p>
</blockquote>
<p>安装过程很简单，先安装<code>python-setuptools</code>工具，再安装工具里面的<code>supervisor</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install python-setuptools</span><br><span class="line">easy_install supervisor</span><br></pre></td></tr></table></figure></p>
<p>安装完成后，新建一个<code>supervisor</code>文件夹，再生成配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/supervisor</span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure></p>
<p><code>supervisor</code>共有三个命令：</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> supervisord</li>
<li style="list-style: none"><input type="checkbox" checked> supervisorctl</li>
<li style="list-style: none"><input type="checkbox" checked> echo_supervisord_conf</li>
</ul>
<p>启动命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure></p>
<p>启动前，先配置先配置文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[inet_http_server]         </span><br><span class="line">port=0.0.0.0:9001       #设置允许任何ip登录后台   </span><br><span class="line">username=user           #设置默认账户   </span><br><span class="line">password=123</span><br></pre></td></tr></table></figure>
<p>这里<code>port</code>默认是<code>127.0.0.1:9001</code>，把它改为<code>0.0.0.0:9001</code>。然后设置监控<code>redis</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[program:redis]</span><br><span class="line">autorestart=true</span><br><span class="line">autostart=true</span><br><span class="line">directory=/etc/redis</span><br><span class="line">command=/usr/bin/redis-server /etc/redis/6379_master.conf</span><br></pre></td></tr></table></figure>
<p>非常的简单明了，我就不多解释了，唯一要讲的是redis安装的时候，他的配置文件一定要把<code>daemonize</code>设置成<code>no</code>,这样redis就不会进入守护进程模式，通过连接就能执行关闭redis，不然…..你只能启动redis而不能关闭它，并且它的状态会变成异常的<code>fatal</code>或者<code>BACKOFF</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[program:mysql]</span><br><span class="line">autorestart=true</span><br><span class="line">autostart=true</span><br><span class="line">directory=/usr/local/mysql</span><br><span class="line">command=/usr/bin/pidproxy /data/mysqldata/localhost.pid /usr/local/mysql/bin/mysqld_safe</span><br></pre></td></tr></table></figure>
<p><code>mysql</code>的配置就不一样。根据<a href="http://www.supervisord.org/subprocess.html" target="_blank" rel="noopener">官网</a>的提示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[program:mysql]</span><br><span class="line">command=/path/to/pidproxy /path/to/pidfile /path/to/mysqld_safe</span><br></pre></td></tr></table></figure></p>
<p>需要找到这<code>pidproxy</code>，<code>pidfile</code>，<code>mysqld_safe</code>,然后…然后就能召唤神龙了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#pidproxy</span><br><span class="line"></span><br><span class="line">~ ᐅ whereis pidproxy </span><br><span class="line">pidproxy: /usr/bin/pidproxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pidfile</span><br><span class="line"></span><br><span class="line">mysql root@localhost:(none)&gt; show variables like &apos;pid_file&apos;\G;</span><br><span class="line">***************************[ 1. row ]***************************</span><br><span class="line">Variable_name | pid_file</span><br><span class="line">Value         | /data/mysqldata/localhost.pid</span><br><span class="line"></span><br><span class="line"># mysqld_safe</span><br><span class="line"></span><br><span class="line">~ ᐅ find / -name mysqld_safe</span><br><span class="line">/usr/local/mysql/bin/mysqld_safe</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/supervisor.png" alt="“图片描述”"><br>大概就这些，supervisor管理进程比较方便。局限性也多，有些想法或许可以实现，比如搭进程管理集群，配合django使用等等。</p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> supervisor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django聚合查询]]></title>
      <url>/2018/01/29/Django%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>在mysql中，如果遇到这样的表格<code>games</code>：</p>
<table>
<thead>
<tr>
<th style="text-align:left">id</th>
<th style="text-align:left">game</th>
<th style="text-align:left">platforms</th>
<th style="text-align:left">zone</th>
<th style="text-align:left">name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">tangm</td>
<td style="text-align:left">jxdq</td>
<td style="text-align:left">CW</td>
<td style="text-align:left">s1</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">tangm</td>
<td style="text-align:left">jxdq</td>
<td style="text-align:left">CW</td>
<td style="text-align:left">s2</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">tangm</td>
<td style="text-align:left">jxdq</td>
<td style="text-align:left">CW</td>
<td style="text-align:left">s3</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">tangm</td>
<td style="text-align:left">jxdq</td>
<td style="text-align:left">BT</td>
<td style="text-align:left">s1</td>
</tr>
</tbody>
</table>
<p>假如我想查询<code>platforms</code>为<code>jxdq</code>,zone为CW的数据，并把name聚合在一格中。可以很容易写出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select zone,count(1),concat(GROUP_CONCAT(name order by id separator &apos;\&quot;\,\&quot;&apos;)) as &apos;result&apos; from games where game=&apos;tmld&apos; GROUP BY zone;</span><br></pre></td></tr></table></figure></p>
<p>得到结果：</p>
<table>
<thead>
<tr>
<th>zone</th>
<th>count(1)</th>
<th>result</th>
</tr>
</thead>
<tbody>
<tr>
<td>CW</td>
<td>3</td>
<td>“s1”,”s2”,”s3”</td>
</tr>
</tbody>
</table>
<p>还是比较简单的，但是如果放在django里呢？？只有<code>Q查询（组合操作）</code>和<code>F查询(列操作)</code>做不到的。<br>在这里需要自定义一个<code>聚合函数</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.db.models import Aggregate, CharField</span><br></pre></td></tr></table></figure>
<p>先从<code>db</code>模块中导入<code>Aggregate</code>和<code>CharField</code>两个方法。看看官方文档是怎么介绍他们的。想看官方文档的<a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.aggregate" target="_blank" rel="noopener">点这里</a>。</p>
<blockquote>
<p>aggregate(<em>args, *</em>kwargs)¶</p>
<p>Returns a dictionary of aggregate values (averages, sums, etc.) calculated over the QuerySet. Each argument to aggregate() specifies a &gt;value that will be included in the dictionary that is returned.<br>The aggregation functions that are provided by Django are described in Aggregation Functions below. Since aggregates are also query<br>expressions, <code>you may combine aggregates with other aggregates or values to create complex aggregates.</code></p>
</blockquote>
<p>简单翻译过来就是说，aggregate会返回汇总值的字典，通过QuerySet进行计算。 aggregate() 的每个参数指定返回的字典中将要包含的值。特别是可以组合多个聚合以及值来创建复杂的聚合。呐，这就是思路。<br>官网的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from django.db.models import Count</span><br><span class="line">&gt;&gt;&gt; q = Blog.objects.aggregate(number_of_entries=Count(&apos;entry&apos;))</span><br><span class="line">&#123;&apos;number_of_entries&apos;: 16&#125;</span><br></pre></td></tr></table></figure></p>
<p>求和作者的Blog数目，是不是有点像mysql语句中的<code>count</code>之后的  <code>AS</code>啊？反正我感觉就是一模一样。<br>用在这个问题上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [8]: server.objects.filter(platform=&apos;jxdq&apos;).filter(zone=&apos;CW&apos;).aggregate(result=Count(&apos;zone&apos;))</span><br><span class="line">Out[8]: &#123;&apos;result&apos;: 3&#125;</span><br></pre></td></tr></table></figure></p>
<p>额，只是求和，跟我们需求的相差太大，<br>在<code>Stack Overflow</code>中有个<a href="https://stackoverflow.com/questions/10340684/group-concat-equivalent-in-django/40478702#40478702" target="_blank" rel="noopener">类似的问题</a>可以查考下。</p>
<p>现在需要django聚合类中的<code>annotate</code>方法。可以为每一个查询对象生成独立的汇总。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [28]: games.objects.filter(platform=&apos;jxdq&apos;).values(&apos;platform&apos;,&apos;zone&apos;).an</span><br><span class="line">    ...: notate(count=Count(0)).order_by(&apos;zone&apos;)</span><br><span class="line">Out[28]: &lt;QuerySet [&#123;&apos;count&apos;: 1, &apos;platform&apos;: u&apos;jxdq&apos;, &apos;zone&apos;: u&apos;BT&apos;&#125;, &#123;&apos;count</span><br><span class="line">    &apos;: 3, &apos;platform&apos;: u&apos;jxdq&apos;, &apos;zone&apos;: u&apos;CW&apos;&#125;]&gt;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，<code>annotate</code>可以把目标对象汇总，QuerySet中的每个对象都会被注上特定的值。<br>到这一步可以获取到聚合数值，但是还不能拿到具体聚合了哪些数值。<br>根据<code>stack overflow</code>的提示，定义一个函数。<code>相关参考文档放在最后。</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from django.db.models import Aggregate, CharField</span><br><span class="line"></span><br><span class="line">class GroupConcat(Aggregate):          # Aggregate的子类</span><br><span class="line">    # supports COUNT(distinct field)</span><br><span class="line">    function = &apos;GROUP_CONCAT&apos;</span><br><span class="line">    template = &apos;%(function)s(%(distinct)s%(expressions)s)&apos;</span><br><span class="line">    def __init__(self, expression, distinct=False,ordering=None,separator=&apos;,&apos;, **extra):</span><br><span class="line">        super(GroupConcat, self).__init__(</span><br><span class="line">            expression,</span><br><span class="line">            distinct=&apos;DISTINCT &apos; if distinct else &apos;&apos;,</span><br><span class="line">            ordering=&apos; ORDER BY %s&apos; %ordering if ordering is not None else &apos;&apos;,</span><br><span class="line">            separator=&apos; SEPARATOR &quot;%s&quot;&apos; % separator,</span><br><span class="line">            output_field=CharField(),</span><br><span class="line">            **extra)</span><br></pre></td></tr></table></figure></p>
<p>将被聚合的列值传入<code>GroupConcat</code>,就可以，<code>separator</code>默认分隔符是<code>,</code>号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GroupConcat(&apos;name&apos;,separator=&apos;,&apos;)</span><br></pre></td></tr></table></figure></p>
<p>放入整个查询语句中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">games.objects.filter(platform=&apos;jxdq&apos;).values(&apos;platform&apos;,&apos;zone&apos;).annotate(count=Count(0),name=GroupConcat(&apos;name&apos;,separator=&apos;,&apos;)).order_by(&apos;zone&apos;)</span><br></pre></td></tr></table></figure></p>
<p>输入结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [7]: games.objects.filter(platform=&apos;jxdq&apos;).values(&apos;platform&apos;,&apos;zone&apos;).annotat</span><br><span class="line">   ...: e(count=Count(0),name=GroupConcat(&apos;name&apos;,separator=&apos;,&apos;)).order_by(&apos;zone</span><br><span class="line">   ...: &apos;)</span><br><span class="line">Out[7]: &lt;QuerySet [&#123;&apos;count&apos;: 1, &apos;platform&apos;: u&apos;jxdq&apos;, &apos;name&apos;: u&apos;s1&apos;&#125;,&#123;&apos;count&apos;: 3, &apos;platform&apos;: u&apos;jxdq&apos;, &apos;name&apos;: u&apos;s1&apos;,&apos;s2&apos;,&apos;s3&apos;&#125;]</span><br></pre></td></tr></table></figure></p>
<p>复杂查询语句不熟的话最好就分段去凑…..个人建议。</p>
<h3 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h3><p><a href="https://code.ziqiangxuetang.com/django/django-queryset-advance.html" target="_blank" rel="noopener">https://code.ziqiangxuetang.com/django/django-queryset-advance.html</a><br><a href="http://usyiyi.cn/documents/Django_111/topics/db/aggregation.html" target="_blank" rel="noopener">http://usyiyi.cn/documents/Django_111/topics/db/aggregation.html</a><br><a href="http://usyiyi.cn/translate/Django_111/ref/models/querysets.html#django.db.models.query.QuerySet.aggregate" target="_blank" rel="noopener">http://usyiyi.cn/translate/Django_111/ref/models/querysets.html#django.db.models.query.QuerySet.aggregate</a></p>
]]></content>
      
        <categories>
            
            <category> web后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用docker-compose搭建mysql主从备份]]></title>
      <url>/2018/01/24/%E7%94%A8docker%E6%90%AD%E5%BB%BAmysql%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD/</url>
      <content type="html"><![CDATA[<h3 id="版本工具"><a href="#版本工具" class="headerlink" title="版本工具"></a>版本工具</h3><blockquote>
<p>centos 7<br>docker 17.09<br>mysql 5.7<br>docker-compose 1.18</p>
</blockquote>
<p>这篇博客记录在一台宿主机上通过docker-compose创建2个mysql镜像，实现主从备份复制。docker-compose安装点击<a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">这里</a>看docker网站的文档,或者进入他的<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">github网址</a>,点击released选择最新的版本，推荐最新的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#安装命令</span><br><span class="line">pip install docker-compose</span><br><span class="line">#或者</span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.19.0-rc1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>
<h3 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h3><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><p><img src="/images/用docker-compose搭建mysql主从备份-1.png" alt="“图片描述”"></p>
<h5 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h5><p><strong>docker-compose.yml</strong>文件用YAML语言编写，<code>严格缩进</code>，略坑。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;2&quot; #compose区分version1和version2，Version 2支持更多的指令</span><br><span class="line">services:</span><br><span class="line">  mysql-master: # 给容器命名</span><br><span class="line">    image: mysql # 指定启动镜像，docker images查看你的 msyql镜像名，额，当然镜像ID也行。</span><br><span class="line">    networks: #指定静态网络</span><br><span class="line">       mysql: #网络名字</span><br><span class="line">          ipv4_address: 192.168.210.21 #IP</span><br><span class="line">    container_name: msyql-master</span><br><span class="line">    privileged: true # 加权限</span><br><span class="line">    volumes: #文件挂载</span><br><span class="line">      - /etc/docker/mysql/master/conf/my.cnf:/etc/mysql/my.cnf</span><br><span class="line">      - /etc/docker/mysql/master/data/:/var/lib/mysql/</span><br><span class="line">    restart: always #重启方式</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">      MYSQL_USER: suyu</span><br><span class="line">      MYSQL_PASSWORD: suyu.123</span><br><span class="line">    expose:</span><br><span class="line">      - 3306</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br><span class="line">  mysql-slave:</span><br><span class="line">    image: mysql</span><br><span class="line">    networks:</span><br><span class="line">       mysql:</span><br><span class="line">          ipv4_address: 192.168.210.22</span><br><span class="line">    container_name: msyql-slave</span><br><span class="line">    privileged: true</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/docker/mysql/slave/conf/my.cnf:/etc/mysql/my.cnf</span><br><span class="line">      - /etc/docker/mysql/slave/data/:/var/lib/mysql/</span><br><span class="line">    links: # mlave与master通讯</span><br><span class="line">      - msyql-master</span><br><span class="line">    restart: always</span><br><span class="line">    environment: #加入环境变量</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">      MYSQL_USER: suyu</span><br><span class="line">      MYSQL_PASSWORD: suyu.123</span><br><span class="line">    ports:</span><br><span class="line">      - 3307:3307</span><br><span class="line">networks: # 定义网络</span><br><span class="line">  mysql: # 网络名</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">      driver: default</span><br><span class="line">      config:</span><br><span class="line">      - subnet: 192.168.210.0/26</span><br></pre></td></tr></table></figure></p>
<p><strong>Dockerfile</strong>是创建镜像的文件，我直接在<code>docker-compose.yml</code>中指定了<code>image</code>，就不需要<code>build</code>,一个<code>docker-compose.yml</code>文件中，<code>image</code>和<code>build</code>是不能同时存在的，要么指定<code>iamge</code>，要么编写<code>Dockerfile</code>，重新<code>build</code>，好，这里略过。</p>
<blockquote>
<p>如果指定的image不存在，那么docker就会尝试去pull一个下来。</p>
</blockquote>
<p><strong>volumes</strong>是<code>docker-compose</code>的文件挂载指定字段。格式如下：</p>
<blockquote>
<p>- 宿主机的目录: 容器的需要挂载的目录: 挂载模式（比如有：ro只读模式：rw读写模式）</p>
</blockquote>
<p>我现在需要把mysql镜像的<code>my.cnf</code>文件挂出来编辑，把他挂载到我宿主机的<code>/etc/docker/mysql/slave/conf</code>下的<code>my.cnf</code>中，然后我只要编辑我本地的my.cnf文件就可以了。</p>
<p><strong>network</strong>是定义网络的字段，在宿主机中<code>ifconfig</code>查看ip，用于划分子网。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">eno16777736: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.203.129  netmask 255.255.255.0  broadcast 192.168.203.255</span><br><span class="line">        inet6 fe80::20c:29ff:fec8:64e5  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:c8:64:e5  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 4622  bytes 2613411 (2.4 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2187  bytes 381149 (372.2 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></p>
<p>宿主机ip是192.168.203.129，我定义容器的静态ip也是在192.168.0.0网段，不然容易出现ip池异常等等一系列恶心的问题。</p>
<p>接下来是mysql的配置文件<code>my.cnf</code>，先列出<code>master</code>的配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /tmp/mysql.sock</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=2</span><br><span class="line"></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line"></span><br><span class="line">skip-external-locking</span><br><span class="line"></span><br><span class="line">key_buffer_size = 1024M</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line">table_open_cache = 512</span><br><span class="line">sort_buffer_size = 2M</span><br><span class="line">net_buffer_length = 8K</span><br><span class="line">read_buffer_size = 2M</span><br><span class="line">read_rnd_buffer_size = 8M</span><br><span class="line">myisam_sort_buffer_size = 64M</span><br><span class="line">thread_cache_size = 8</span><br><span class="line">max_connections=1000</span><br><span class="line">query_cache_size= 128M</span><br><span class="line">innodb_buffer_pool_size=4096M</span><br><span class="line">slow-query-log=1</span><br><span class="line">long_query_time = 5</span><br><span class="line">slow-query-log-file=slow.log</span><br><span class="line">#default-character-set=utf8</span><br><span class="line">skip-name-resolve</span><br><span class="line">innodb_file_per_table</span><br><span class="line"></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_format=mixed</span><br><span class="line">server-id = 1</span><br><span class="line">expire_logs_days = 1</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"># no-auto-rehash</span><br><span class="line">auto-rehash</span><br><span class="line"># Remove the next comment character if you are not familiar with SQL</span><br><span class="line">#safe-updates</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size = 20M</span><br><span class="line">sort_buffer_size = 20M</span><br><span class="line">read_buffer = 2M</span><br><span class="line">write_buffer = 2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure></p>
<p><code>slave</code>的配置文件跟<code>master</code>的类似，就一点<code>server-id = 2</code>，不一样，一个<code>mysql</code>主从集群中<code>server-id</code>不能有重复的。</p>
<h3 id="生成容器"><a href="#生成容器" class="headerlink" title="生成容器"></a>生成容器</h3><blockquote>
<p>docker-compose up -d</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">Creating msyql-master ... done</span><br><span class="line">Creating msyql-slave ... done</span><br><span class="line">Creating msyql-slave ...</span><br></pre></td></tr></table></figure>
<p>然后查看容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS                      PORTS                              NAMES</span><br><span class="line">cf42251d5d27        mysql                     &quot;docker-entrypoint...&quot;   14 seconds ago      Up 12 seconds               3306/tcp, 0.0.0.0:3307-&gt;3307/tcp   msyql-slave</span><br><span class="line">0a94a3b57312        mysql                     &quot;docker-entrypoint...&quot;   15 seconds ago      Up 13 seconds               0.0.0.0:3306-&gt;3306/tcp             msyql-master</span><br></pre></td></tr></table></figure></p>
<p>看看<code>slave</code>的ip：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker inspect cf42251d5d27 |grep IPA</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;IPAMConfig&quot;: &#123;</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;192.168.210.22&quot;,</span><br></pre></td></tr></table></figure></p>
<p>看来容器貌似没有问题，接下来搭建主从。先进入<code>master</code>配置。</p>
<blockquote>
<p>docker exec -it 0a94a3b57312 /bin/bash<br><img src="/images/用docker-compose搭建mysql主从备份-5.png" alt="“图片描述”"><br>创建<code>slave</code>账户<code>mysql&gt; create user slave;</code></p>
<p>授权 GRANT REPLICATION SLAVE ON <em>.</em> TO ‘repl’@’%’ IDENTIFIED BY ‘slave’;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |      636 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>接下来修改<code>slave</code>,同理登录<code>mysql-slave</code>:</p>
<blockquote>
<p>docker exec -it cf42251d5d27 /bin/bash</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to master_host=&apos;mysql-master&apos;,master_port=3306,master_user=&apos;slave&apos;,master_password=&apos;slave&apos;,master_log_file=&apos;mysql-bin.000003&apos;,master_log_pos=920;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>mysql&gt; start slave<br><img src="/images/用docker-compose搭建mysql主从备份-2.png" alt="“图片描述”"><br>显示正常，这时候在<code>master</code>上随便改动点什么，看<code>slave</code>会不会跟着变化。</p>
</blockquote>
<p><img src="/images/用docker-compose搭建mysql主从备份-3.png" alt="“图片描述”"><br>上<code>slave</code>上面看看：<br><img src="/images/用docker-compose搭建mysql主从备份-4.png" alt="“图片描述”"><br>大功告成……睡觉。</p>
]]></content>
      
        <categories>
            
            <category> 容器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ansible踩坑札记]]></title>
      <url>/2018/01/18/ansible%E8%B8%A9%E5%9D%91%E6%9C%AD%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="版本工具"><a href="#版本工具" class="headerlink" title="版本工具"></a>版本工具</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> Centos7</li>
<li style="list-style: none"><input type="checkbox" checked> Ansible2.4.2</li>
<li style="list-style: none"><input type="checkbox" checked> Python2.7</li>
<li style="list-style: none"><input type="checkbox" checked> docker</li>
</ul>
<h3 id="主机分配"><a href="#主机分配" class="headerlink" title="主机分配"></a>主机分配</h3><blockquote>
<p>server: 192.168.203.129<br>client: 172.17.0.3（docker虚拟镜像，centos6.9版本）</p>
</blockquote>
<h3 id="Ansible安装"><a href="#Ansible安装" class="headerlink" title="Ansible安装"></a>Ansible安装</h3><p>基础件安装：</p>
<blockquote>
<ul>
<li>pip install setuptools PyYAML Jinja2 paramiko simplejson</li>
</ul>
</blockquote>
<p>ansible安装：</p>
<blockquote>
<ul>
<li>pip install ansible</li>
</ul>
</blockquote>
<p>安装好之后，查看下ansible的版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]# ansible --version</span><br><span class="line">ansible 2.4.2.0</span><br><span class="line">  config file = None</span><br><span class="line">  configured module search path = [u&apos;/root/.ansible/plugins/modules&apos;, u&apos;/usr/share/ansible/plugins/modules&apos;]</span><br><span class="line">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 2.7.5 (default, Nov 20 2015, 02:00:19) [GCC 4.8.5 20150623 (Red Hat 4.8.5-4)]</span><br></pre></td></tr></table></figure></p>
<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>ansible是需要ssh登录客户端,服务端和客户端都需要安装ssh,别忘记要启动</p>
<blockquote>
<ul>
<li>yum -y install openssh-server openssh-clients</li>
<li>/etc/init.d/sshd start</li>
</ul>
</blockquote>
<p>在<code>master</code>上生成秘钥</p>
<blockquote>
<ul>
<li>ssh-keygen</li>
</ul>
</blockquote>
<p>然后一路回车，在<code>/root/.ssh</code>处查看密钥，修改<code>client</code>的root密码，然后将生产的密钥<code>ssh-copy-id</code>到<code>client</code>。</p>
<blockquote>
<ul>
<li>ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.17.0.3</li>
</ul>
</blockquote>
<p>提示输入<code>client</code>的root密码，成功后可以测试登录</p>
<blockquote>
<ul>
<li>ssh root@172.17.0.3</li>
</ul>
</blockquote>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>到这一步算是安装完毕，现在开始修改配置文件。在<code>/etc/</code>目录下创建<code>ansible</code>目录，创建ansible.cfg文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/ansible ᐅ vim ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">hostfile=/etc/ansible/hosts</span><br><span class="line">private_key_file = /root/.ssh/id_rsa</span><br><span class="line">remote_user = root</span><br><span class="line">remote_port = 22</span><br><span class="line">host_key_checking = False</span><br></pre></td></tr></table></figure></p>
<p>创建hosts文件，用于存储客户端ip和分组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/ansible ᐅ vim hosts</span><br><span class="line">172.17.0.3</span><br></pre></td></tr></table></figure></p>
<p>修改好后，就可以测试ansible了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ansible]# ansible &apos;172.17.0.3&apos; -m ping</span><br><span class="line">172.17.0.3 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 运维工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> ansible </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
